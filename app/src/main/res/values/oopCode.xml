<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="oopAss1" formatted="false">
       <![CDATA[
    <div>Question: <BR />write&nbsp;a&nbsp;program&nbsp;to&nbsp;overload&nbsp;the&nbsp;<font color=Blue>operator</font>&nbsp;‘+’&nbsp;<font color=Blue>for</font>&nbsp;complex&nbsp;numbers. <BR /> <BR />Answer: <BR />To&nbsp;perform&nbsp;complex&nbsp;number&nbsp;addition&nbsp;<font color=Blue>using</font>&nbsp;<font color=Blue>operator</font>&nbsp;overloading. <BR /> <BR />#&nbsp;<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>.h&gt; <BR />#&nbsp;<font color=Blue>include</font>&nbsp;&lt;conio.h&gt; <BR /> <BR /><font color=Blue>class</font>&nbsp;complex&nbsp; <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;r,&nbsp;i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r=i=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;getdata() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;”R.P”; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;r; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;”I.P”; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;i; <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;outdata&nbsp;(<font color=Blue>char</font>*msg) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;,msg; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;”(“&lt;&lt;r; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;”+j”&nbsp;&lt;&lt;i&lt;&lt;”)”; <BR />} <BR /> <BR />Complex&nbsp;<font color=Blue>operator</font>+(Complex); <BR />}; <BR /> <BR />Complex&nbsp;complex::Operator+(Complex(<font color=Maroon>2</font>)) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex&nbsp;temp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.r=r+c2.r; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.i=I=c2.i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>(temp); <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex&nbsp;c1,&nbsp;c2,c3; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;”Enter&nbsp;<font color=Maroon>2</font>&nbsp;complex&nbsp;no:&nbsp;“&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cl.getdta(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c2.getdata(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c3=c1+c2; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c3.outdata&nbsp;(“The&nbsp;result&nbsp;is&nbsp;:”); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />} <BR /> <BR />OUTPUT <BR />Enter&nbsp;<font color=Maroon>2</font>&nbsp;complex&nbsp;no:&nbsp;R.P:&nbsp;<font color=Maroon>2</font>&nbsp;I.P:&nbsp;<font color=Maroon>2</font>&nbsp;R.p:&nbsp;<font color=Maroon>2</font>&nbsp;I.P:<font color=Maroon>2</font> <BR />The&nbsp;result&nbsp;is:&nbsp;<font color=Maroon>4</font>+j4 <BR />RESULT <BR />Thus&nbsp;the&nbsp;complex&nbsp;number&nbsp;addition&nbsp;has&nbsp;been&nbsp;done&nbsp;<font color=Blue>using</font>&nbsp;<font color=Blue>operator</font>&nbsp;overloading&nbsp;. <BR /> <BR />Question&nbsp;: <BR />Write&nbsp;a&nbsp;complete&nbsp;C++&nbsp;program&nbsp;to&nbsp;<font color=Blue>do</font>&nbsp;the&nbsp;following&nbsp;: <BR /> <BR />(i)&nbsp;‘Student’&nbsp;is&nbsp;a&nbsp;base&nbsp;<font color=Blue>class</font>,&nbsp;having&nbsp;two&nbsp;data&nbsp;members:&nbsp;entryno&nbsp;<font color=Blue>and</font>&nbsp;name;&nbsp; <BR />&nbsp;entryno&nbsp;is&nbsp;integer&nbsp;<font color=Blue>and</font>&nbsp;name&nbsp;of&nbsp;<font color=Maroon>20</font>&nbsp;characters&nbsp;<font color=Blue>long</font>.&nbsp;The&nbsp;value&nbsp;of&nbsp;entryno&nbsp;is&nbsp;<font color=Maroon>1</font>&nbsp;<font color=Blue>for</font>&nbsp;Science&nbsp; <BR />student&nbsp;<font color=Blue>and</font>&nbsp;<font color=Maroon>2</font>&nbsp;<font color=Blue>for</font>&nbsp;Arts&nbsp;student,&nbsp;otherwise&nbsp;it&nbsp;isan&nbsp;error. <BR /> <BR />(ii)&nbsp;‘Science’&nbsp;<font color=Blue>and</font>&nbsp;‘Arts’&nbsp;are&nbsp;two&nbsp;derived&nbsp;classes,&nbsp;having&nbsp;respectively&nbsp;data <BR />items&nbsp;marks&nbsp;<font color=Blue>for</font>&nbsp;Physics,Chemistry,&nbsp;Mathematics&nbsp;<font color=Blue>and</font>&nbsp;marks&nbsp;<font color=Blue>for</font>&nbsp;English,&nbsp;History,&nbsp;Economics. <BR /> <BR />(iii)&nbsp;Read&nbsp;appropriate&nbsp;data&nbsp;from&nbsp;the&nbsp;screen&nbsp;for3&nbsp;science&nbsp;<font color=Blue>and</font>&nbsp;<font color=Maroon>2</font>&nbsp;arts&nbsp;students. <BR /> <BR />(iv)&nbsp;Display&nbsp;entryno,&nbsp;name,&nbsp;marks&nbsp;<font color=Blue>for</font>&nbsp;science&nbsp;students&nbsp;first&nbsp;<font color=Blue>and</font>&nbsp;then&nbsp;<font color=Blue>for</font>&nbsp;arts&nbsp;students. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>class</font>&nbsp;student <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>protected</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;entryno; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;name[<font color=Maroon>20</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;getdata() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;name&nbsp;of&nbsp;the&nbsp;student"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;name; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;display() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Name&nbsp;of&nbsp;the&nbsp;student&nbsp;is"</font>&lt;&lt;name&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>class</font>&nbsp;science:<font color=Blue>public</font>&nbsp;student <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;pcm[<font color=Maroon>3</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;getdata() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student::getdata(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;marks&nbsp;for&nbsp;Physics,Chemistry&nbsp;and&nbsp;Mathematics"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>0</font>;j&lt;<font color=Maroon>3</font>;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;pcm[j]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;display()&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryno=<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"entry&nbsp;no&nbsp;for&nbsp;Science&nbsp;student&nbsp;is"</font>&lt;&lt;entryno&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student::display(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Marks&nbsp;in&nbsp;Physics,Chemistry&nbsp;and&nbsp;Mathematics&nbsp;are"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>0</font>;j&lt;<font color=Maroon>3</font>;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;pcm[j]&lt;&lt;<font color=Blue>endl</font>;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>class</font>&nbsp;arts:<font color=Blue>public</font>&nbsp;student <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;ehe[<font color=Maroon>3</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;getdata() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student::getdata(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;marks&nbsp;for&nbsp;English,History&nbsp;and&nbsp;Economics"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>0</font>;j&lt;<font color=Maroon>3</font>;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;ehe[j]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;display() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryno=<font color=Maroon>2</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"entry&nbsp;no&nbsp;for&nbsp;Arts&nbsp;student&nbsp;is"</font>&lt;&lt;entryno&lt;&lt;<font color=Blue>endl</font>;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student::display(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Marks&nbsp;in&nbsp;English,History&nbsp;and&nbsp;Economics&nbsp;are"</font>&lt;&lt;<font color=Blue>endl</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>0</font>;j&lt;<font color=Maroon>3</font>;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;ehe[j]&lt;&lt;<font color=Blue>endl</font>;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;science&nbsp;s1[<font color=Maroon>3</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arts&nbsp;a1[<font color=Maroon>3</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;i,j,k,l; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Entry&nbsp;for&nbsp;Science&nbsp;students"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(i=<font color=Maroon>0</font>;i&lt;<font color=Maroon>3</font>;i++)&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s1[i].getdata(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Details&nbsp;of&nbsp;three&nbsp;Science&nbsp;students&nbsp;are"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(j=<font color=Maroon>0</font>;j&lt;<font color=Maroon>3</font>;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s1[j].display(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Entry&nbsp;for&nbsp;Arts&nbsp;students"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(k=<font color=Maroon>0</font>;k&lt;<font color=Maroon>3</font>;k++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a1[k].getdata(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Details&nbsp;of&nbsp;three&nbsp;Arts&nbsp;students&nbsp;are"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(l=<font color=Maroon>0</font>;l&lt;<font color=Maroon>3</font>;l++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a1[l].display(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}&nbsp; <BR /> <BR /> <BR />Question&nbsp;: <BR />An&nbsp;electricity&nbsp;board&nbsp;charges&nbsp;the&nbsp;following&nbsp;rates&nbsp;to&nbsp;domestic&nbsp;users&nbsp;to&nbsp;discourage&nbsp;large <BR />consumption&nbsp;of&nbsp;energy&nbsp;: <BR />For&nbsp;the&nbsp;first&nbsp;<font color=Maroon>100</font>&nbsp;units&nbsp;&nbsp;−&nbsp;&nbsp;<font color=Maroon>50</font>&nbsp;P&nbsp;per&nbsp;unit <BR />Beyond&nbsp;<font color=Maroon>300</font>&nbsp;units&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;−&nbsp;&nbsp;<font color=Maroon>60</font>&nbsp;P&nbsp;per&nbsp;unit <BR /> <BR />If&nbsp;the&nbsp;total&nbsp;cost&nbsp;is&nbsp;more&nbsp;than&nbsp;Rs<font color=Maroon>.250</font><font color=Maroon>.00</font>&nbsp;then&nbsp;an&nbsp;additional&nbsp;surcharge&nbsp;of&nbsp;<font color=Maroon>15</font>%&nbsp;is&nbsp;added&nbsp;on&nbsp;the&nbsp;difference.&nbsp;Define&nbsp;a&nbsp;c <BR />lass&nbsp;Electricity&nbsp;in&nbsp;which&nbsp;the&nbsp;function&nbsp;Bill&nbsp;computes&nbsp;the&nbsp;cost.&nbsp;Define&nbsp;a <BR />derived&nbsp;<font color=Blue>class</font>&nbsp;More_Electricity&nbsp;<font color=Blue>and</font>&nbsp;override&nbsp;Bill&nbsp;to&nbsp;add&nbsp;the&nbsp;surcharge.&nbsp; <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>class</font>&nbsp;electricity <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>protected</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;unit; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;cost; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;bill() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"\n&nbsp;enter&nbsp;the&nbsp;no.&nbsp;of&nbsp;units"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;unit; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(unit&lt;=<font color=Maroon>100</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost=<font color=Maroon>0</font><font color=Maroon>.50</font>*unit;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"cost&nbsp;up&nbsp;to&nbsp;100&nbsp;unit&nbsp;is&nbsp;Rs."</font>&lt;&lt;cost&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(unit&gt;<font color=Maroon>300</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost=<font color=Maroon>0</font><font color=Maroon>.60</font>*unit; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Beyond&nbsp;300&nbsp;units&nbsp;is&nbsp;Rs"</font>&lt;&lt;cost; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /> <BR /><font color=Blue>class</font>&nbsp;more_electricity:<font color=Blue>public</font>&nbsp;electricity <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;surcharge,diff,total_cost; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;bill() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;electricity::bill(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(cost&gt;<font color=Maroon>250</font><font color=Maroon>.00</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diff=cost-<font color=Maroon>250</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;surcharge=diff*<font color=Maroon>0</font><font color=Maroon>.15</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total_cost=cost+surcharge; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;Bill&nbsp;amount&nbsp;with&nbsp;surcharge&nbsp;is&nbsp;Rs"</font>&lt;&lt;total_cost; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Bill&nbsp;amout&nbsp;is&nbsp;Rs."</font>&lt;&lt;cost; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;more_electricity&nbsp;me; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;me.bill(); <BR />}&nbsp;</div>
   ]]>
        </string>
     
     <string name="oopAss2" formatted="false">
       <![CDATA[   
    <div>Question: <BR />Write&nbsp;a&nbsp;program&nbsp;to&nbsp;open&nbsp;a&nbsp;file&nbsp;in&nbsp;C++&nbsp;“Hello.dat”&nbsp;<font color=Blue>and</font>&nbsp;write <BR />“This&nbsp;is&nbsp;only&nbsp;a&nbsp;test” <BR />“Nothing&nbsp;can&nbsp;go&nbsp;wrong” <BR />“All&nbsp;things&nbsp;are&nbsp;fine...”&nbsp;into&nbsp;the&nbsp;file.&nbsp;Read&nbsp;the&nbsp;file&nbsp;<font color=Blue>and</font>&nbsp;display&nbsp;the&nbsp;contents. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR />#<font color=Blue>include</font>&lt;fstream.h&gt; <BR /><font color=Blue>void</font>&nbsp;main()&nbsp; <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ofstream&nbsp;fout; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fout.open(<font color=Maroon>"Hello.dat"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fout&lt;&lt;<font color=Maroon>"This&nbsp;is&nbsp;only&nbsp;a&nbsp;test\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fout&lt;&lt;<font color=Maroon>"Nothing&nbsp;can&nbsp;go&nbsp;wrong\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fout&lt;&lt;<font color=Maroon>"All&nbsp;things&nbsp;are&nbsp;fine....\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fout.close(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>const</font>&nbsp;<font color=Blue>int</font>&nbsp;N=<font color=Maroon>100</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;line[N]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ifstream&nbsp;fin; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fin.open(<font color=Maroon>"Hello.dat"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Contents&nbsp;of&nbsp;the&nbsp;Hello.dat&nbsp;file\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(fin) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fin.getline(line,N); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;line; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fin.close();}&nbsp; <BR /> <BR /> <BR />Question: <BR />Develop&nbsp;a&nbsp;program&nbsp;in&nbsp;C++&nbsp;to&nbsp;create&nbsp;a&nbsp;database&nbsp;of&nbsp;the&nbsp;following&nbsp;items&nbsp;of&nbsp;the&nbsp;derived&nbsp;<font color=Blue>class</font>. <BR />Name&nbsp;of&nbsp;the&nbsp;patient,&nbsp;sex,&nbsp;age,&nbsp;ward&nbsp;number,&nbsp;bed&nbsp;number,&nbsp;nature&nbsp;of&nbsp;illness,&nbsp;date&nbsp;of&nbsp;admission. <BR />Design&nbsp;a&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;consisting&nbsp;of&nbsp;data&nbsp;members&nbsp;:name&nbsp;of&nbsp;the&nbsp;patient,&nbsp;sex&nbsp;<font color=Blue>and</font>&nbsp;age;&nbsp;<font color=Blue>and</font>&nbsp;another <BR />base&nbsp;<font color=Blue>class</font>&nbsp;consisting&nbsp;of&nbsp;the&nbsp;data&nbsp;members&nbsp;:&nbsp;bed&nbsp;number&nbsp;<font color=Blue>and</font>&nbsp;nature&nbsp;of&nbsp;the&nbsp;illness.&nbsp;The&nbsp;derived <BR /><font color=Blue>class</font>&nbsp;consists&nbsp;of&nbsp;the&nbsp;data&nbsp;member&nbsp;,date&nbsp;of&nbsp;admission. <BR /> <BR />Program&nbsp;should&nbsp;carry&nbsp;out&nbsp;the&nbsp;following&nbsp;methods <BR />(i)&nbsp;Add&nbsp;a&nbsp;<font color=Blue>new</font>&nbsp;entry. <BR />(ii)&nbsp;List&nbsp;the&nbsp;complete&nbsp;record. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;conio.h&gt; <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>class</font>&nbsp;A <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;name[<font color=Maroon>20</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;sex[<font color=Maroon>10</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;age; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;get_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;disp_data(); <BR />}; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;A::get_data() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;d&nbsp;name:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;name; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;d&nbsp;age:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;age; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;d&nbsp;sex:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;sex; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;A::disp_data() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"name:"</font>&lt;&lt;name&lt;&lt;<font color=Maroon>\n</font>;&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"age:"</font>&lt;&lt;age&lt;&lt;<font color=Maroon>\n</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"sex:"</font>&lt;&lt;sex&lt;&lt;<font color=Maroon>\n</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /><font color=Blue>class</font>&nbsp;B <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;bed_number; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;nature_illness[<font color=Maroon>40</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;get_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;disp_data(); <BR />}; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;B::get_data() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;d&nbsp;bed_number:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;bed_number; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;d&nbsp;nature_illness:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;nature_illness; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;B::disp_data() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"bed_number:"</font>&lt;&lt;bed_number&lt;&lt;<font color=Maroon>\n</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"nature_illness:"</font>&lt;&lt;nature_illness&lt;&lt;<font color=Maroon>\n</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>class</font>&nbsp;C:<font color=Blue>public</font>&nbsp;A,<font color=Blue>public</font>&nbsp;B <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;date_admission; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;get_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;disp_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;record(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;C::get_data() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A::get_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B::get_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;Data&nbsp;of&nbsp;Admission:-&gt;&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;date_admission; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;C::disp_data() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A::disp_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B::disp_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Date&nbsp;of&nbsp;Admission\t"</font>&lt;&lt;date_admission; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr();&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C&nbsp;c1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Adding&nbsp;a&nbsp;new&nbsp;record&nbsp;to&nbsp;database\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c1.get_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Displaying&nbsp;the&nbsp;added&nbsp;record&nbsp;to&nbsp;database\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c1.disp_data(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />}&nbsp; <BR /> <BR />Question: <BR />How&nbsp;many&nbsp;times&nbsp;is&nbsp;the&nbsp;copy&nbsp;constructor&nbsp;called&nbsp;inthe&nbsp;following&nbsp;code? <BR /> <BR />Apple&nbsp;func(Apple&nbsp;u) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apple&nbsp;w=v; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;w; <BR />} <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apple&nbsp;x; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apple&nbsp;y&nbsp;=&nbsp;func&nbsp;(x); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apple&nbsp;z&nbsp;=&nbsp;func&nbsp;(y); <BR />} <BR /> <BR />Answer: <BR /> <BR /><font color=Maroon>2</font>&nbsp;times&nbsp; <BR /> <BR /> <BR />Question: <BR />Write&nbsp;a&nbsp;program&nbsp;code&nbsp;which&nbsp;throws&nbsp;an&nbsp;exception&nbsp;of&nbsp;type&nbsp;<font color=Blue>char</font>*&nbsp;<font color=Blue>and</font>&nbsp;another&nbsp;of&nbsp;type&nbsp;<font color=Blue>int</font>. <BR />Write&nbsp;a&nbsp;<font color=Blue>try</font>&nbsp;----&nbsp;<font color=Blue>catch</font>&nbsp;block&nbsp;which&nbsp;can&nbsp;<font color=Blue>catch</font>&nbsp;both&nbsp;the&nbsp;exception. <BR /> <BR />Answer: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /><font color=Blue>int</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;Operand1,&nbsp;Operand2,&nbsp;Result; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Request&nbsp;two&nbsp;numbers&nbsp;from&nbsp;the&nbsp;user</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"This&nbsp;program&nbsp;allows&nbsp;you&nbsp;to&nbsp;perform&nbsp;a&nbsp;division&nbsp;of&nbsp;two&nbsp;numbers\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"To&nbsp;proceed,&nbsp;enter&nbsp;two&nbsp;numbers:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>try</font>&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"First&nbsp;Number:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;Operand1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Second&nbsp;Number:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;Operand2; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Find&nbsp;out&nbsp;if&nbsp;the&nbsp;denominator&nbsp;is&nbsp;0</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(&nbsp;Operand2&nbsp;==&nbsp;<font color=Maroon>0</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;<font color=Maroon>"Division&nbsp;by&nbsp;zero&nbsp;not&nbsp;allowed"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Perform&nbsp;a&nbsp;division&nbsp;and&nbsp;display&nbsp;the&nbsp;result</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;=&nbsp;Operand1&nbsp;/&nbsp;Operand2;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"\n"</font>&nbsp;&lt;&lt;&nbsp;Operand1&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"&nbsp;/&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Operand2&nbsp;&lt;&lt;<font color=Maroon>"&nbsp;=&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Result&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"\n\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>catch</font>(<font color=Blue>const</font>&nbsp;<font color=Blue>char</font>*&nbsp;Str)&nbsp;<font color=Green>//&nbsp;Catch&nbsp;an&nbsp;exception</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Display&nbsp;a&nbsp;string&nbsp;message&nbsp;accordingly</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"\nBad&nbsp;Operator:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Str; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>int</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;Operand1,&nbsp;Operand2,&nbsp;Result; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>const</font>&nbsp;<font color=Blue>char</font>&nbsp;Operator&nbsp;=&nbsp;<font color=Maroon>/</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Request&nbsp;two&nbsp;numbers&nbsp;from&nbsp;the&nbsp;user</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"This&nbsp;program&nbsp;allows&nbsp;you&nbsp;to&nbsp;perform&nbsp;a&nbsp;division&nbsp;of&nbsp;two&nbsp;numbers\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"To&nbsp;proceed,&nbsp;enter&nbsp;two&nbsp;numbers\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>try</font>&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"First&nbsp;Number:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;Operand1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Second&nbsp;Number:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;Operand2; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Find&nbsp;out&nbsp;if&nbsp;the&nbsp;denominator&nbsp;is&nbsp;0</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(&nbsp;Operand2&nbsp;==&nbsp;<font color=Maroon>0</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Perform&nbsp;a&nbsp;division&nbsp;and&nbsp;display&nbsp;the&nbsp;result</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;=&nbsp;Operand1&nbsp;/&nbsp;Operand2; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"\n"</font>&nbsp;&lt;&lt;&nbsp;Operand1&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"&nbsp;/&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Operand2&nbsp;&lt;&lt;<font color=Maroon>"&nbsp;=&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Result&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"\n\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>catch</font>(<font color=Blue>const</font>&nbsp;<font color=Blue>int</font>&nbsp;n)&nbsp;<font color=Green>//&nbsp;Catch&nbsp;an&nbsp;exception</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Display&nbsp;a&nbsp;string&nbsp;message&nbsp;accordingly</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"\nBad&nbsp;Operator:&nbsp;Division&nbsp;by&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;n&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"not&nbsp;allowed\n\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /><font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />}&nbsp; <BR /> <BR />Question: <BR />Create&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;Time&nbsp;that&nbsp;has&nbsp;separate&nbsp;<font color=Blue>int</font>&nbsp;memberdata&nbsp;<font color=Blue>for</font>&nbsp;hours,&nbsp;minutes&nbsp;<font color=Blue>and</font>&nbsp;seconds. <BR />One&nbsp;constructor&nbsp;should&nbsp;initialize&nbsp;<font color=Blue>this</font>&nbsp;data&nbsp;to&nbsp;zero&nbsp;<font color=Blue>and</font>&nbsp;another&nbsp;constructor&nbsp;initialize&nbsp;it&nbsp;to <BR />fixed&nbsp;values.&nbsp;Write&nbsp;member&nbsp;function&nbsp;to&nbsp;display&nbsp;time&nbsp;in&nbsp;<font color=Maroon>12</font>&nbsp;hour&nbsp;as&nbsp;well&nbsp;as&nbsp;<font color=Maroon>24</font>&nbsp;hour <BR />format.&nbsp;The&nbsp;final&nbsp;member&nbsp;function&nbsp;should&nbsp;add&nbsp;two&nbsp;objects&nbsp;of&nbsp;<font color=Blue>class</font>&nbsp;Time. <BR />A&nbsp;main()&nbsp;program&nbsp;should&nbsp;create&nbsp;three&nbsp;objects&nbsp;of&nbsp;<font color=Blue>class</font>&nbsp;time,&nbsp;of&nbsp;which&nbsp;two&nbsp;are&nbsp;initialized <BR />to&nbsp;specific&nbsp;values&nbsp;<font color=Blue>and</font>&nbsp;third&nbsp;object&nbsp;initialized&nbsp;to&nbsp;zero.&nbsp;Then&nbsp;it&nbsp;should&nbsp;add&nbsp;the&nbsp;two&nbsp; <BR />initialized&nbsp;values&nbsp;together,&nbsp;leaving&nbsp;the&nbsp;result&nbsp;in&nbsp;the&nbsp;third.&nbsp;Finally&nbsp;it&nbsp;should&nbsp;display&nbsp;the&nbsp;value <BR />of&nbsp;all&nbsp;three&nbsp;objects&nbsp;with&nbsp;appropriate&nbsp;headings. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR />#<font color=Blue>include</font>&lt;<font color=Blue>string</font>.h&gt; <BR /><font color=Blue>class</font>&nbsp;time24 <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;hours,minutes,seconds; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time24() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hours=minutes=seconds=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time24(<font color=Blue>int</font>&nbsp;h,<font color=Blue>int</font>&nbsp;m,<font color=Blue>int</font>&nbsp;s) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hours=h; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minutes=m; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seconds=s; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;display() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(hours&lt;<font color=Maroon>10</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;hours&lt;&lt;<font color=Maroon>":"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(minutes&lt;<font color=Maroon>10</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;minutes&lt;&lt;<font color=Maroon>":"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(seconds&lt;<font color=Maroon>10</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;seconds; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>class</font>&nbsp;time12 <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>bool</font>&nbsp;pm; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;hour,minute; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time12() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pm=true;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour=minute=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time12(<font color=Blue>bool</font>&nbsp;ap,<font color=Blue>int</font>&nbsp;h,<font color=Blue>int</font>&nbsp;m) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pm=ap; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour=h; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minute=m; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time12(time&nbsp;<font color=Maroon>24</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;display() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;hour&lt;&lt;<font color=Maroon>":"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(minute&lt;<font color=Maroon>10</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;minute&lt;&lt;<font color=Maroon>"&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;*am_pm=pm&nbsp;?&nbsp;<font color=Maroon>"p.m."</font>&nbsp;:&nbsp;<font color=Maroon>"a.m."</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;am_pm; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR />time12::time12(time24&nbsp;t24) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;hrs24=hours; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>bool</font>&nbsp;pm=hours&lt;<font color=Maroon>12</font>&nbsp;?&nbsp;false:true; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;min=seconds&lt;<font color=Maroon>30</font>&nbsp;?&nbsp;minutes:minutes+<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(min==<font color=Maroon>60</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++hrs24; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(hrs24==<font color=Maroon>12</font>&nbsp;||&nbsp;hrs24==<font color=Maroon>24</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pm=(pm==true)?&nbsp;false:true; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;hrs12=(hrs24&lt;<font color=Maroon>13</font>)&nbsp;?&nbsp;hrs24&nbsp;:&nbsp;hrs24-<font color=Maroon>12</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(hrs12==<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hrs12=<font color=Maroon>12</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pm=false; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /><font color=Blue>return</font>&nbsp;time12(pm,hrs12,min); <BR />} <BR /> <BR /><font color=Blue>int</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;h1,m1,s1;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(true) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;24-hour&nbsp;time:\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Hours(0-23):"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;h1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(h1&gt;<font color=Maroon>23</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>(<font color=Maroon>1</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Minutes:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;m1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Seconds:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;s1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time24&nbsp;t24(h1,m1,s1); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"you&nbsp;entered:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t24.display(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time12&nbsp;t12=t24; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"\n12-hour&nbsp;time:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t12.display(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>; <BR />} <BR /><font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />}&nbsp;</div>
 ]]>
        </string>
    <string name="oopAss3" formatted="false">
       <![CDATA[   
     <div>Question: <BR />Define&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;Distance&nbsp;with&nbsp;feet&nbsp;<font color=Blue>and</font>&nbsp;inch&nbsp;<font color=Blue>and</font>&nbsp;with&nbsp;a&nbsp;print&nbsp;function&nbsp;to&nbsp;print&nbsp;the&nbsp;distance. <BR />Write&nbsp;a&nbsp;non-member&nbsp;function&nbsp;max&nbsp;which&nbsp;returns&nbsp;the&nbsp;larger&nbsp;of&nbsp;two&nbsp;distance&nbsp;objects,&nbsp;which <BR />are&nbsp;arguments.&nbsp;Write&nbsp;a&nbsp;main&nbsp;program&nbsp;that&nbsp;accepts&nbsp;two&nbsp;distance&nbsp;objects&nbsp;from&nbsp;the&nbsp;user, <BR />compare&nbsp;them&nbsp;<font color=Blue>and</font>&nbsp;display&nbsp;the&nbsp;larger. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>class</font>&nbsp;distance <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;feet; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;inches; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distance() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feet=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inches=<font color=Maroon>0</font><font color=Maroon>.0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;getdist() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;feet:"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;feet; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;inches:"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;inches; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;showdist() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;feet&lt;&lt;<font color=Blue>endl</font>&lt;&lt;inches&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>friend</font>&nbsp;<font color=Blue>void</font>&nbsp;maxdist(distance&nbsp;d1,&nbsp;distance&nbsp;d2) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d1.feet=d1.feet+&nbsp;d1.inches/<font color=Maroon>12</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d2.feet=d2.feet+&nbsp;d2.inches/<font color=Maroon>12</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(d1.feet&gt;d2.feet) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"first&nbsp;distance&nbsp;is&nbsp;greater"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"second&nbsp;distance&nbsp;is&nbsp;greater"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distance&nbsp;d3,d4; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d3.getdist(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d3.showdist(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d4.getdist(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d4.showdist(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxdist(d3,d4); <BR />}&nbsp; <BR /> <BR />Question: <BR />Define&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp;Person&nbsp;which&nbsp;has&nbsp;name&nbsp;(<font color=Blue>char</font>*)&nbsp;<font color=Blue>and</font>&nbsp;age&nbsp;(<font color=Blue>int</font>).&nbsp;Define&nbsp;the&nbsp;following <BR />constructors. <BR /> <BR />a.<font color=Blue>default</font> <BR />b.with&nbsp;name&nbsp;as&nbsp;argument&nbsp;(assume&nbsp;age&nbsp;is&nbsp;<font color=Maroon>18</font>) <BR />c.with&nbsp;name&nbsp;<font color=Blue>and</font>&nbsp;age&nbsp;as&nbsp;argument <BR />Also&nbsp;define&nbsp;the&nbsp;copy&nbsp;constructor. <BR /> <BR />Answer: <BR /> <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR />#<font color=Blue>include</font>&lt;<font color=Blue>string</font>.h&gt; <BR /><font color=Blue>class</font>&nbsp;person <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;*name; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;age; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//strcpy(name,NULL);</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person(<font color=Blue>char</font>&nbsp;*n) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(name,n); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age=<font color=Maroon>18</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person(<font color=Blue>char</font>&nbsp;*n1,<font color=Blue>int</font>&nbsp;a)&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(name,n1); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age=a; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person(person&nbsp;&amp;p) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(name,p.name); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age=p.age; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;disp() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"name&nbsp;is"</font>&lt;&lt;name; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"age&nbsp;is"</font>&lt;&lt;age; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person&nbsp;p1(<font color=Maroon>"ram"</font>),p2(<font color=Maroon>"sita"</font>,<font color=Maroon>20</font>),p3=p2; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"hello"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.disp(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2.disp(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p3.disp(); <BR />}&nbsp; <BR /> <BR />Question. <BR />Using&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp;above,&nbsp;define&nbsp;two&nbsp;subclasses&nbsp;Student&nbsp;<font color=Blue>and</font>&nbsp;Professor.&nbsp;Student&nbsp;subclass <BR />displays&nbsp;the&nbsp;name&nbsp;<font color=Blue>and</font>&nbsp;CGPA&nbsp;(grade&nbsp;points&nbsp;in&nbsp;<font color=Blue>float</font>)&nbsp;<font color=Blue>and</font>&nbsp;Professor&nbsp;subclass&nbsp;displays&nbsp;the <BR />name&nbsp;<font color=Blue>and</font>&nbsp;number&nbsp;of&nbsp;publications&nbsp;(<font color=Blue>int</font>).&nbsp;Write&nbsp;a&nbsp;main&nbsp;program&nbsp;<font color=Blue>using</font>&nbsp;polymorphism&nbsp;to <BR />display&nbsp;the&nbsp;data&nbsp;of&nbsp;one&nbsp;student&nbsp;<font color=Blue>and</font>&nbsp;one&nbsp;professor. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>class</font>&nbsp;person <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>protected</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;name[<font color=Maroon>40</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;getname() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;name:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;name; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;disp() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Name&nbsp;is:"</font>&lt;&lt;name&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;getdata()=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>bool</font>&nbsp;outstanding()=<font color=Maroon>0</font>; <BR />};&nbsp; <BR /> <BR /><font color=Blue>class</font>&nbsp;student:<font color=Blue>public</font>&nbsp;person <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;gpa; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;getdata() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person::getname(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;students&nbsp;GPA:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;gpa; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>bool</font>&nbsp;outstanding() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>(gpa&gt;<font color=Maroon>3</font><font color=Maroon>.5</font>)&nbsp;?&nbsp;true:false; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>class</font>&nbsp;professor:<font color=Blue>public</font>&nbsp;person <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;numpubs; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;getdata() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person::getname(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;number&nbsp;of&nbsp;professors&nbsp;publication:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;numpubs; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>bool</font>&nbsp;outstanding() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>(numpubs&gt;<font color=Maroon>100</font>)&nbsp;?&nbsp;true:false; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person&nbsp;*perptr[<font color=Maroon>10</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;n=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;choice; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>do</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;Enter&nbsp;student&nbsp;or&nbsp;professor(s/p):"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;choice; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(choice==<font color=Maroon>s</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perptr[n]=<font color=Blue>new</font>&nbsp;student; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perptr[n]=<font color=Blue>new</font>&nbsp;professor; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perptr[n++]-&gt;getdata(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"enter&nbsp;another(y/n)?"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;choice; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<font color=Blue>while</font>&nbsp;(choice==<font color=Maroon>y</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>0</font>;j&lt;n;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perptr[j]-&gt;disp(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(perptr[j]-&gt;outstanding())&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"this&nbsp;person&nbsp;is&nbsp;outstanding\n"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />} <BR /> <BR /> <BR />Question: <BR /> <BR />Write&nbsp;a&nbsp;global&nbsp;function&nbsp;which&nbsp;uses&nbsp;the&nbsp;above&nbsp;<font color=Blue>operator</font>&nbsp;<font color=Blue>and</font>&nbsp;prints&nbsp;the&nbsp;number&nbsp;<font color=Blue>and</font>&nbsp;the&nbsp;number&nbsp;of <BR />times&nbsp;it&nbsp;appears&nbsp;(frequency)&nbsp;. <BR /> <BR />Answer: <BR /><font color=Blue>void</font>&nbsp;frequency_calc() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bag&nbsp;b; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>0</font>;j&lt;<font color=Maroon>50</font>;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;temp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;temp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[j]=temp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;i=<font color=Maroon>0</font>;i&lt;<font color=Maroon>50</font>;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;k=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(j=j+<font color=Maroon>1</font>;j&lt;<font color=Maroon>50</font>;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(b[i]==b[j]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;b[i]&lt;&lt;”occurred”&lt;&lt;k&lt;&lt;”times”; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}&nbsp; <BR /> <BR />Question: <BR />Give&nbsp;a&nbsp;function&nbsp;<font color=Blue>template</font>&nbsp;SEARCH&nbsp;that&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;search&nbsp;an&nbsp;array&nbsp;of&nbsp;elements&nbsp;of&nbsp;any <BR />type&nbsp;<font color=Blue>and</font>&nbsp;returns&nbsp;the&nbsp;index&nbsp;of&nbsp;the&nbsp;element,&nbsp;<font color=Blue>if</font>&nbsp;found.&nbsp;Give&nbsp;both&nbsp;the&nbsp;function&nbsp;prototype&nbsp;<font color=Blue>and</font> <BR />the&nbsp;function&nbsp;definition&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;<font color=Blue>template</font>.&nbsp;Assume&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;<font color=Blue>template</font>&nbsp;Array&nbsp;&lt;T&gt;&nbsp;is&nbsp;available. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>template</font>&lt;<font color=Blue>class</font>&nbsp;atype&gt; <BR /><font color=Green>//function&nbsp;returns&nbsp;index&nbsp;number&nbsp;of&nbsp;item,&nbsp;or&nbsp;-1&nbsp;if&nbsp;not&nbsp;found</font> <BR /><font color=Blue>int</font>&nbsp;find(atype&nbsp;*array,atype&nbsp;value,<font color=Blue>int</font>&nbsp;size) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>0</font>;j&lt;size;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(array[j]==value) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;j; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;-<font color=Maroon>1</font>; <BR />} <BR /> <BR /><font color=Blue>char</font>&nbsp;chrarr[]={<font color=Maroon>1</font>,<font color=Maroon>3</font>,<font color=Maroon>5</font>,<font color=Maroon>9</font>,<font color=Maroon>11</font>,<font color=Maroon>13</font>}; <BR /><font color=Blue>char</font>&nbsp;ch=<font color=Maroon>5</font>; <BR /> <BR /><font color=Blue>int</font>&nbsp;intarr[]={<font color=Maroon>1</font>,<font color=Maroon>3</font>,<font color=Maroon>5</font>,<font color=Maroon>9</font>,<font color=Maroon>11</font>,<font color=Maroon>13</font>}; <BR /><font color=Blue>int</font>&nbsp;in=<font color=Maroon>6</font>; <BR /> <BR /><font color=Blue>long</font>&nbsp;lonarr[]={<font color=Maroon>1L</font>,<font color=Maroon>3L</font>,<font color=Maroon>5L</font>,<font color=Maroon>9L</font>,<font color=Maroon>11L</font>,<font color=Maroon>13L</font>}; <BR /><font color=Blue>long</font>&nbsp;lo=<font color=Maroon>11L</font>; <BR /> <BR /><font color=Blue>double</font>&nbsp;dubarr[]={<font color=Maroon>1</font><font color=Maroon>.0</font>,<font color=Maroon>3</font><font color=Maroon>.0</font>,<font color=Maroon>5</font><font color=Maroon>.0</font>,<font color=Maroon>9</font><font color=Maroon>.0</font>,<font color=Maroon>11</font><font color=Maroon>.0</font>,<font color=Maroon>13</font><font color=Maroon>.0</font>}; <BR /><font color=Blue>double</font>&nbsp;db=<font color=Maroon>4</font><font color=Maroon>.0</font>; <BR /> <BR /><font color=Blue>int</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"\n&nbsp;5&nbsp;in&nbsp;chrarr:&nbsp;index="</font>&lt;&lt;find(chrarr,ch,<font color=Maroon>6</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"\n&nbsp;6&nbsp;in&nbsp;intarr:&nbsp;index="</font>&lt;&lt;find(intarr,in,<font color=Maroon>6</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"\n&nbsp;11&nbsp;in&nbsp;lonarr:&nbsp;index="</font>&lt;&lt;find(lonarr,lo,<font color=Maroon>6</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"\n&nbsp;4&nbsp;in&nbsp;dubarr:&nbsp;index="</font>&lt;&lt;find(dubarr,db,<font color=Maroon>6</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />}&nbsp;</div>
      ]]>
        </string>
     
    <string name="oopAss4" formatted="false">
       <![CDATA[ 
    <div>Question: <BR />Write&nbsp;a&nbsp;function&nbsp;<font color=Blue>template</font>&nbsp;<font color=Blue>for</font>&nbsp;sorting&nbsp;a&nbsp;list&nbsp;of&nbsp;arrays. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /><font color=Blue>template</font>&lt;<font color=Blue>class</font>&nbsp;T&gt; <BR /><font color=Blue>void</font>&nbsp;sort(T&nbsp;a[],<font color=Blue>int</font>&nbsp;n) <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;i=<font color=Maroon>0</font>;i&lt;n-<font color=Maroon>1</font>;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=i+<font color=Maroon>1</font>;j&lt;n;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(a[i]&gt;a[j]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap(a[i],a[j]); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />} <BR /> <BR /><font color=Blue>template</font>&lt;<font color=Blue>class</font>&nbsp;X&gt; <BR /><font color=Blue>void</font>&nbsp;swap(X&nbsp;&amp;a,X&nbsp;&amp;b) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;temp=a; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=b; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b=temp; <BR />} <BR /> <BR /><font color=Blue>int</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;v[<font color=Maroon>5</font>]={<font color=Maroon>32</font>,<font color=Maroon>78</font>,<font color=Maroon>12</font>,<font color=Maroon>98</font>,<font color=Maroon>56</font>}; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort(v,<font color=Maroon>5</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"\n&nbsp;the&nbsp;list&nbsp;of&nbsp;sorted&nbsp;array&nbsp;is&nbsp;:-&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;i=<font color=Maroon>0</font>;i&lt;<font color=Maroon>5</font>;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"\n"</font>&lt;&lt;v[i]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />}&nbsp; <BR /> <BR />Question: <BR />How&nbsp;does&nbsp;inheritance&nbsp;influence&nbsp;the&nbsp;working&nbsp;of&nbsp;cons <BR />tructor&nbsp;<font color=Blue>and</font>&nbsp;destructor? <BR />Given&nbsp;the&nbsp;following&nbsp;set&nbsp;of&nbsp;definitions <BR />Class&nbsp;x <BR />{ <BR />}; <BR /><font color=Blue>class</font>&nbsp;y:&nbsp;<font color=Blue>public</font>&nbsp;x <BR />{ <BR />}; <BR /><font color=Blue>class</font>&nbsp;z:&nbsp;<font color=Blue>public</font>&nbsp;y <BR />{ <BR />}; <BR />z&nbsp;obj; <BR />What&nbsp;order&nbsp;will&nbsp;the&nbsp;constructor&nbsp;<font color=Blue>and</font>&nbsp;destructor&nbsp;be&nbsp;invoked? <BR /> <BR />Answer: <BR />Inheritance&nbsp;has&nbsp;a&nbsp;great&nbsp;deal&nbsp;of&nbsp;influence&nbsp;over&nbsp;the&nbsp;working&nbsp;of&nbsp;constructors&nbsp;<font color=Blue>and</font>&nbsp;destructors. <BR />In&nbsp;<font color=Blue>case</font>&nbsp;of&nbsp;inheritance&nbsp;the&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;constructor&nbsp;is&nbsp;invoked&nbsp;first&nbsp;<font color=Blue>and</font>&nbsp;then&nbsp;the&nbsp;derived&nbsp;<font color=Blue>class</font> <BR />constructor.&nbsp;In&nbsp;<font color=Blue>case</font>&nbsp;of&nbsp;multiple&nbsp;inheritance,&nbsp;the&nbsp;constructors&nbsp;of&nbsp;base&nbsp;classes&nbsp;are&nbsp;executed&nbsp;in&nbsp;the <BR />order&nbsp;in&nbsp;which&nbsp;they&nbsp;occur&nbsp;in&nbsp;the&nbsp;declaration&nbsp;in&nbsp;the&nbsp;derived&nbsp;<font color=Blue>class</font>.&nbsp;Similarly&nbsp;in&nbsp;<font color=Blue>case</font>&nbsp;of&nbsp; <BR />multilevel&nbsp;inheritance,&nbsp;the&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;constructors&nbsp;are&nbsp;execut&nbsp;ed&nbsp;in&nbsp;the&nbsp;order&nbsp;of&nbsp;their&nbsp;inheritance. <BR />Destructors&nbsp;in&nbsp;<font color=Blue>case</font>&nbsp;of&nbsp;inheritance&nbsp;are&nbsp;executed&nbsp;exa&nbsp;ctly&nbsp;in&nbsp;the&nbsp;opposite&nbsp;order&nbsp;in&nbsp;which <BR />constructors&nbsp;are&nbsp;executed.&nbsp;Likewise&nbsp;in&nbsp;<font color=Blue>case</font>&nbsp;of&nbsp;multilevel&nbsp;inheritance&nbsp;destructors&nbsp;are&nbsp; <BR />executed&nbsp;in&nbsp;the&nbsp;reverse&nbsp;of&nbsp;that&nbsp;is,&nbsp;from&nbsp;derived&nbsp;to&nbsp;base. <BR /> <BR /><font color=Blue>class</font>&nbsp;x <BR />{ <BR />}; <BR /> <BR /><font color=Blue>class</font>&nbsp;y:&nbsp;<font color=Blue>public</font>&nbsp;x <BR />{ <BR />}; <BR /> <BR /><font color=Blue>class</font>&nbsp;z:&nbsp;<font color=Blue>public</font>&nbsp;y <BR />{ <BR />}; <BR /> <BR />z&nbsp;obj; <BR />In&nbsp;the&nbsp;above&nbsp;definitions,&nbsp;the&nbsp;contructor&nbsp;will&nbsp;be&nbsp;fired&nbsp;in&nbsp;the&nbsp;following&nbsp;sequence- <BR /><font color=Blue>class</font>&nbsp;x&nbsp;-&gt;&nbsp;<font color=Blue>class</font>&nbsp;y&nbsp;-&gt;&nbsp;<font color=Blue>class</font>&nbsp;z <BR />similarly,&nbsp;destructors&nbsp;will&nbsp;be&nbsp;fired&nbsp;exactly&nbsp;in&nbsp;the&nbsp;reverse&nbsp;sequence- <BR /><font color=Blue>class</font>&nbsp;z&nbsp;-&gt;&nbsp;<font color=Blue>class</font>&nbsp;y&nbsp;-&gt;&nbsp;<font color=Blue>class</font>&nbsp;x <BR /> <BR /> <BR />Question: <BR />What&nbsp;is&nbsp;meant&nbsp;by&nbsp;a&nbsp;constant&nbsp;member&nbsp;function?&nbsp;How&nbsp;is&nbsp;it&nbsp;declared?&nbsp;Give&nbsp;an&nbsp;example. <BR /> <BR />Answer:&nbsp;Constant&nbsp;Member&nbsp;functions&nbsp;: <BR />A&nbsp;<font color=Blue>const</font>&nbsp;member&nbsp;function&nbsp;is&nbsp;that&nbsp;which&nbsp;does&nbsp;alter&nbsp;the&nbsp;value&nbsp;of&nbsp;any&nbsp;data&nbsp;in&nbsp;the&nbsp;program.&nbsp; <BR />It&nbsp;is&nbsp;declared&nbsp;as&nbsp;follows: <BR /> <BR /><font color=Blue>void</font>&nbsp;area(<font color=Blue>int</font>,&nbsp;<font color=Blue>int</font>)&nbsp;<font color=Blue>const</font>; <BR /> <BR /><font color=Blue>float</font>&nbsp;dis()&nbsp;<font color=Blue>const</font>; <BR /> <BR />when&nbsp;a&nbsp;<font color=Blue>const</font>&nbsp;function&nbsp;tries&nbsp;to&nbsp;alter&nbsp;any&nbsp;data&nbsp;,thecompiler&nbsp;generates&nbsp;an&nbsp;error&nbsp;message. <BR /> <BR />Question: <BR />Write&nbsp;a&nbsp;program&nbsp;<font color=Blue>for</font>&nbsp;Conversion&nbsp;from&nbsp;Basic&nbsp;to&nbsp;Class&nbsp;Type. <BR /> <BR />Answer: <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR /><font color=Blue>class</font>&nbsp;time <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;hours; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;minutes; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time(){} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time(<font color=Blue>int</font>&nbsp;t) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hours=t/<font color=Maroon>60</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minutes=t%<font color=Maroon>60</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;showtime() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;hours&lt;&lt;<font color=Maroon>"hrs&nbsp;"</font>&lt;&lt;minutes&lt;&lt;<font color=Maroon>"min"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;t1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;duration=<font color=Maroon>90</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1=duration; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1.showtime(); <BR />}&nbsp;</div>
 ]]>
        </string>
  
  <string name="oopClassesAndObjects" formatted="false">
       <![CDATA[  
    <div>C++&nbsp;Class&nbsp;Definitions: <BR /> <BR />When&nbsp;you&nbsp;define&nbsp;a&nbsp;<font color=Blue>class</font>,&nbsp;you&nbsp;define&nbsp;a&nbsp;blueprint&nbsp;<font color=Blue>for</font>&nbsp;a&nbsp;data&nbsp;type.&nbsp;This&nbsp;doesnt&nbsp;actually&nbsp;define&nbsp; <BR />any&nbsp;data,&nbsp;but&nbsp;it&nbsp;does&nbsp;define&nbsp;what&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp;name&nbsp;means,&nbsp;that&nbsp;is,&nbsp;what&nbsp;an&nbsp;object&nbsp;of&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp; <BR />will&nbsp;consist&nbsp;of&nbsp;<font color=Blue>and</font>&nbsp;what&nbsp;operations&nbsp;can&nbsp;be&nbsp;performed&nbsp;on&nbsp;such&nbsp;an&nbsp;object. <BR /> <BR />A&nbsp;<font color=Blue>class</font>&nbsp;definition&nbsp;starts&nbsp;with&nbsp;the&nbsp;keyword&nbsp;<font color=Blue>class</font>&nbsp;followed&nbsp;by&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp;name;&nbsp;<font color=Blue>and</font>&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp; <BR />body,&nbsp;enclosed&nbsp;by&nbsp;a&nbsp;pair&nbsp;of&nbsp;curly&nbsp;braces.&nbsp;A&nbsp;<font color=Blue>class</font>&nbsp;definition&nbsp;must&nbsp;be&nbsp;followed&nbsp;either&nbsp;by&nbsp;a&nbsp; <BR />semicolon&nbsp;<font color=Blue>or</font>&nbsp;a&nbsp;list&nbsp;of&nbsp;declarations.&nbsp;For&nbsp;example,&nbsp;we&nbsp;defined&nbsp;the&nbsp;Box&nbsp;data&nbsp;type&nbsp;<font color=Blue>using</font>&nbsp;the&nbsp; <BR />keyword&nbsp;<font color=Blue>class</font>&nbsp;as&nbsp;follows: <BR /> <BR /><font color=Blue>class</font>&nbsp;Box <BR />{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;length;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Length&nbsp;of&nbsp;a&nbsp;box</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;breadth;&nbsp;&nbsp;<font color=Green>//&nbsp;Breadth&nbsp;of&nbsp;a&nbsp;box</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;height;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Height&nbsp;of&nbsp;a&nbsp;box</font> <BR />}; <BR /> <BR />The&nbsp;keyword&nbsp;<font color=Blue>public</font>&nbsp;determines&nbsp;the&nbsp;access&nbsp;attributes&nbsp;of&nbsp;the&nbsp;members&nbsp;of&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp;that&nbsp;follow&nbsp; <BR />it.&nbsp;A&nbsp;<font color=Blue>public</font>&nbsp;member&nbsp;can&nbsp;be&nbsp;accessed&nbsp;from&nbsp;outside&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp;anywhere&nbsp;within&nbsp;the&nbsp;scope&nbsp;of&nbsp;the&nbsp; <BR /><font color=Blue>class</font>&nbsp;object.&nbsp;You&nbsp;can&nbsp;also&nbsp;specify&nbsp;the&nbsp;members&nbsp;of&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;as&nbsp;<font color=Blue>private</font>&nbsp;<font color=Blue>or</font>&nbsp;<font color=Blue>protected</font>&nbsp;which&nbsp;we&nbsp; <BR />will&nbsp;discuss&nbsp;in&nbsp;a&nbsp;sub-section. <BR />Define&nbsp;C++&nbsp;Objects: <BR /> <BR />A&nbsp;<font color=Blue>class</font>&nbsp;provides&nbsp;the&nbsp;blueprints&nbsp;<font color=Blue>for</font>&nbsp;objects,&nbsp;so&nbsp;basically&nbsp;an&nbsp;object&nbsp;is&nbsp;created&nbsp;from&nbsp;a&nbsp;<font color=Blue>class</font>.&nbsp;We&nbsp;declare&nbsp;objects&nbsp;of&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;with&nbsp;exactly&nbsp;the&nbsp;same&nbsp;sort&nbsp;of&nbsp;declaration&nbsp;that&nbsp;we&nbsp;declare&nbsp;variables&nbsp;of&nbsp;basic&nbsp;types.&nbsp;Following&nbsp;statements&nbsp;declare&nbsp;two&nbsp;objects&nbsp;of&nbsp;<font color=Blue>class</font>&nbsp;Box: <BR /> <BR />Box&nbsp;Box1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Declare&nbsp;Box1&nbsp;of&nbsp;type&nbsp;Box</font> <BR />Box&nbsp;Box2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Declare&nbsp;Box2&nbsp;of&nbsp;type&nbsp;Box</font> <BR /> <BR />Both&nbsp;of&nbsp;the&nbsp;objects&nbsp;Box1&nbsp;<font color=Blue>and</font>&nbsp;Box2&nbsp;will&nbsp;have&nbsp;their&nbsp;own&nbsp;copy&nbsp;of&nbsp;data&nbsp;members. <BR />Accessing&nbsp;the&nbsp;Data&nbsp;Members: <BR /> <BR />The&nbsp;<font color=Blue>public</font>&nbsp;data&nbsp;members&nbsp;of&nbsp;objects&nbsp;of&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;can&nbsp;be&nbsp;accessed&nbsp;<font color=Blue>using</font>&nbsp;the&nbsp;direct&nbsp;member&nbsp; <BR />access&nbsp;<font color=Blue>operator</font>&nbsp;(.).&nbsp;Let&nbsp;us&nbsp;<font color=Blue>try</font>&nbsp;the&nbsp;following&nbsp;example&nbsp;to&nbsp;make&nbsp;the&nbsp;things&nbsp;clear: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /> <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Blue>class</font>&nbsp;Box <BR />{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;length;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Length&nbsp;of&nbsp;a&nbsp;box</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;breadth;&nbsp;&nbsp;<font color=Green>//&nbsp;Breadth&nbsp;of&nbsp;a&nbsp;box</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;height;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Height&nbsp;of&nbsp;a&nbsp;box</font> <BR />}; <BR /> <BR /><font color=Blue>int</font>&nbsp;main(&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;Box&nbsp;Box1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Declare&nbsp;Box1&nbsp;of&nbsp;type&nbsp;Box</font> <BR />&nbsp;&nbsp;&nbsp;Box&nbsp;Box2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Declare&nbsp;Box2&nbsp;of&nbsp;type&nbsp;Box</font> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;volume&nbsp;=&nbsp;<font color=Maroon>0</font><font color=Maroon>.0</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Store&nbsp;the&nbsp;volume&nbsp;of&nbsp;a&nbsp;box&nbsp;here</font> <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;box&nbsp;1&nbsp;specification</font> <BR />&nbsp;&nbsp;&nbsp;Box1.height&nbsp;=&nbsp;<font color=Maroon>5</font><font color=Maroon>.0</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;Box1.length&nbsp;=&nbsp;<font color=Maroon>6</font><font color=Maroon>.0</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;Box1.breadth&nbsp;=&nbsp;<font color=Maroon>7</font><font color=Maroon>.0</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;box&nbsp;2&nbsp;specification</font> <BR />&nbsp;&nbsp;&nbsp;Box2.height&nbsp;=&nbsp;<font color=Maroon>10</font><font color=Maroon>.0</font>; <BR />&nbsp;&nbsp;&nbsp;Box2.length&nbsp;=&nbsp;<font color=Maroon>12</font><font color=Maroon>.0</font>; <BR />&nbsp;&nbsp;&nbsp;Box2.breadth&nbsp;=&nbsp;<font color=Maroon>13</font><font color=Maroon>.0</font>; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;volume&nbsp;of&nbsp;box&nbsp;1</font> <BR />&nbsp;&nbsp;&nbsp;volume&nbsp;=&nbsp;Box1.height&nbsp;*&nbsp;Box1.length&nbsp;*&nbsp;Box1.breadth; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Volume&nbsp;of&nbsp;Box1&nbsp;:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;volume&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;volume&nbsp;of&nbsp;box&nbsp;2</font> <BR />&nbsp;&nbsp;&nbsp;volume&nbsp;=&nbsp;Box2.height&nbsp;*&nbsp;Box2.length&nbsp;*&nbsp;Box2.breadth; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Volume&nbsp;of&nbsp;Box2&nbsp;:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;volume&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />When&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp;it&nbsp;produces&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Volume&nbsp;of&nbsp;Box1&nbsp;:&nbsp;<font color=Maroon>210</font> <BR />Volume&nbsp;of&nbsp;Box2&nbsp;:&nbsp;<font color=Maroon>1560</font> <BR /> <BR />It&nbsp;is&nbsp;important&nbsp;to&nbsp;note&nbsp;that&nbsp;<font color=Blue>private</font>&nbsp;<font color=Blue>and</font>&nbsp;<font color=Blue>protected</font>&nbsp;members&nbsp;can&nbsp;<font color=Blue>not</font>&nbsp;be&nbsp;accessed&nbsp;directly&nbsp; <BR /><font color=Blue>using</font>&nbsp;direct&nbsp;member&nbsp;access&nbsp;<font color=Blue>operator</font>&nbsp;(.).&nbsp;We&nbsp;will&nbsp;learn&nbsp;how&nbsp;<font color=Blue>private</font>&nbsp;<font color=Blue>and</font>&nbsp;<font color=Blue>protected</font>&nbsp;members&nbsp; <BR />can&nbsp;be&nbsp;accessed</div>
     ]]>
        </string>
     
  <string name="oopInheritance" formatted="false">
       <![CDATA[    
  <div>Base&nbsp;&amp;&nbsp;Derived&nbsp;Classes: <BR /> <BR />A&nbsp;<font color=Blue>class</font>&nbsp;can&nbsp;be&nbsp;derived&nbsp;from&nbsp;more&nbsp;than&nbsp;one&nbsp;classes,&nbsp;which&nbsp;means&nbsp;it&nbsp;can&nbsp;inherit&nbsp;data&nbsp;<font color=Blue>and</font>&nbsp; <BR />functions&nbsp;from&nbsp;multiple&nbsp;base&nbsp;classes.&nbsp;To&nbsp;define&nbsp;a&nbsp;derived&nbsp;<font color=Blue>class</font>,&nbsp;we&nbsp;use&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;derivation&nbsp; <BR />list&nbsp;to&nbsp;specify&nbsp;the&nbsp;base&nbsp;<font color=Blue>class</font>(es).&nbsp;A&nbsp;<font color=Blue>class</font>&nbsp;derivation&nbsp;list&nbsp;names&nbsp;one&nbsp;<font color=Blue>or</font>&nbsp;more&nbsp;base&nbsp;classes&nbsp; <BR /><font color=Blue>and</font>&nbsp;has&nbsp;the&nbsp;form: <BR /> <BR /><font color=Blue>class</font>&nbsp;derived-<font color=Blue>class</font>:&nbsp;access-specifier&nbsp;base-<font color=Blue>class</font> <BR /> <BR />Where&nbsp;access-specifier&nbsp;is&nbsp;one&nbsp;of&nbsp;<font color=Blue>public</font>,&nbsp;<font color=Blue>protected</font>,&nbsp;<font color=Blue>or</font>&nbsp;<font color=Blue>private</font>,&nbsp;<font color=Blue>and</font>&nbsp;base-<font color=Blue>class</font>&nbsp;is&nbsp;the&nbsp;name&nbsp;of&nbsp;a&nbsp;previously&nbsp;defined&nbsp;<font color=Blue>class</font>.&nbsp;If&nbsp;the&nbsp;access-specifier&nbsp;is&nbsp;<font color=Blue>not</font>&nbsp;used,&nbsp;then&nbsp;it&nbsp;is&nbsp;<font color=Blue>private</font>&nbsp;by&nbsp;<font color=Blue>default</font>. <BR /> <BR />Consider&nbsp;a&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;Shape&nbsp;<font color=Blue>and</font>&nbsp;its&nbsp;derived&nbsp;<font color=Blue>class</font>&nbsp;Rectangle&nbsp;as&nbsp;follows: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR />&nbsp; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Green>//&nbsp;Base&nbsp;class</font> <BR /><font color=Blue>class</font>&nbsp;Shape&nbsp; <BR />{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;setWidth(<font color=Blue>int</font>&nbsp;w) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width&nbsp;=&nbsp;w; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;setHeight(<font color=Blue>int</font>&nbsp;h) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height&nbsp;=&nbsp;h; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>protected</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;width; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;height; <BR />}; <BR /> <BR /><font color=Green>//&nbsp;Derived&nbsp;class</font> <BR /><font color=Blue>class</font>&nbsp;Rectangle:&nbsp;<font color=Blue>public</font>&nbsp;Shape <BR />{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;getArea() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(width&nbsp;*&nbsp;height);&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>int</font>&nbsp;main(<font color=Blue>void</font>) <BR />{ <BR />&nbsp;&nbsp;&nbsp;Rectangle&nbsp;Rect; <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;Rect.setWidth(<font color=Maroon>5</font>); <BR />&nbsp;&nbsp;&nbsp;Rect.setHeight(<font color=Maroon>7</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Print&nbsp;the&nbsp;area&nbsp;of&nbsp;the&nbsp;object.</font> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Total&nbsp;area:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Rect.getArea()&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />When&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp;it&nbsp;produces&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Total&nbsp;area:&nbsp;<font color=Maroon>35</font></div>
   ]]>
        </string>
    
    <string name="oopFunctionAndOperatorOverloading" formatted="false">
       <![CDATA[ 
  <div>Function&nbsp;overloading&nbsp;in&nbsp;C++: <BR /> <BR />You&nbsp;can&nbsp;have&nbsp;multiple&nbsp;definitions&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;same&nbsp;function&nbsp;name&nbsp;in&nbsp;the&nbsp;same&nbsp;scope.&nbsp;The&nbsp;definition <BR />&nbsp;of&nbsp;the&nbsp;function&nbsp;must&nbsp;differ&nbsp;from&nbsp;each&nbsp;other&nbsp;by&nbsp;the&nbsp;types&nbsp;<font color=Blue>and</font>/<font color=Blue>or</font>&nbsp;the&nbsp;number&nbsp;of&nbsp;arguments&nbsp;in&nbsp; <BR />the&nbsp;argument&nbsp;list.&nbsp;You&nbsp;can&nbsp;<font color=Blue>not</font>&nbsp;overload&nbsp;function&nbsp;declarations&nbsp;that&nbsp;differ&nbsp;only&nbsp;by&nbsp;<font color=Blue>return</font>&nbsp;type. <BR /> <BR />Following&nbsp;is&nbsp;the&nbsp;example&nbsp;where&nbsp;same&nbsp;function&nbsp;print()&nbsp;is&nbsp;being&nbsp;used&nbsp;to&nbsp;print&nbsp;different&nbsp;data&nbsp;types: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR />&nbsp; <BR /><font color=Blue>class</font>&nbsp;printData&nbsp; <BR />{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;print(<font color=Blue>int</font>&nbsp;i)&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Printing&nbsp;int:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;i&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;print(<font color=Blue>double</font>&nbsp;&nbsp;f)&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Printing&nbsp;float:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;f&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;print(<font color=Blue>char</font>*&nbsp;c)&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Printing&nbsp;character:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;c&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>int</font>&nbsp;main(<font color=Blue>void</font>) <BR />{ <BR />&nbsp;&nbsp;&nbsp;printData&nbsp;pd; <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Call&nbsp;print&nbsp;to&nbsp;print&nbsp;integer</font> <BR />&nbsp;&nbsp;&nbsp;pd.print(<font color=Maroon>5</font>); <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Call&nbsp;print&nbsp;to&nbsp;print&nbsp;float</font> <BR />&nbsp;&nbsp;&nbsp;pd.print(<font color=Maroon>500</font><font color=Maroon>.263</font>); <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Call&nbsp;print&nbsp;to&nbsp;print&nbsp;character</font> <BR />&nbsp;&nbsp;&nbsp;pd.print(<font color=Maroon>"Hello&nbsp;C++"</font>); <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />When&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp;it&nbsp;produces&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Printing&nbsp;<font color=Blue>int</font>:&nbsp;<font color=Maroon>5</font> <BR />Printing&nbsp;<font color=Blue>float</font>:&nbsp;<font color=Maroon>500</font><font color=Maroon>.263</font> <BR />Printing&nbsp;character:&nbsp;Hello&nbsp;C++ <BR /> <BR />Operators&nbsp;overloading&nbsp;in&nbsp;C++: <BR /> <BR />You&nbsp;can&nbsp;redefine&nbsp;<font color=Blue>or</font>&nbsp;overload&nbsp;most&nbsp;of&nbsp;the&nbsp;built-in&nbsp;operators&nbsp;available&nbsp;in&nbsp;C++.&nbsp;Thus&nbsp;a&nbsp; <BR />programmer&nbsp;can&nbsp;use&nbsp;operators&nbsp;with&nbsp;user-defined&nbsp;types&nbsp;as&nbsp;well. <BR /> <BR />Overloaded&nbsp;operators&nbsp;are&nbsp;functions&nbsp;with&nbsp;special&nbsp;names&nbsp;the&nbsp;keyword&nbsp;<font color=Blue>operator</font>&nbsp;followed&nbsp;by&nbsp;the&nbsp; <BR />symbol&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;<font color=Blue>operator</font>&nbsp;being&nbsp;defined.&nbsp;Like&nbsp;any&nbsp;other&nbsp;function,&nbsp;an&nbsp;overloaded&nbsp;<font color=Blue>operator</font>&nbsp;has&nbsp; <BR />a&nbsp;<font color=Blue>return</font>&nbsp;type&nbsp;<font color=Blue>and</font>&nbsp;a&nbsp;parameter&nbsp;list. <BR /> <BR />Box&nbsp;<font color=Blue>operator</font>+(<font color=Blue>const</font>&nbsp;Box&amp;); <BR /> <BR />declares&nbsp;the&nbsp;addition&nbsp;<font color=Blue>operator</font>&nbsp;that&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;add&nbsp;two&nbsp;Box&nbsp;objects&nbsp;<font color=Blue>and</font>&nbsp;returns&nbsp;final&nbsp;Box&nbsp;object.&nbsp;Most&nbsp;overloaded&nbsp;operators&nbsp;may&nbsp;be&nbsp;defined&nbsp;as&nbsp;ordinary&nbsp;non-member&nbsp;functions&nbsp;<font color=Blue>or</font>&nbsp;as&nbsp;<font color=Blue>class</font>&nbsp;member&nbsp;functions.&nbsp;In&nbsp;<font color=Blue>case</font>&nbsp;we&nbsp;define&nbsp;above&nbsp;function&nbsp;as&nbsp;non-member&nbsp;function&nbsp;of&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;then&nbsp;we&nbsp;would&nbsp;have&nbsp;to&nbsp;pass&nbsp;two&nbsp;arguments&nbsp;<font color=Blue>for</font>&nbsp;each&nbsp;operand&nbsp;as&nbsp;follows: <BR /> <BR />Box&nbsp;<font color=Blue>operator</font>+(<font color=Blue>const</font>&nbsp;Box&amp;,&nbsp;<font color=Blue>const</font>&nbsp;Box&amp;); <BR /> <BR />Following&nbsp;is&nbsp;the&nbsp;example&nbsp;to&nbsp;show&nbsp;the&nbsp;concept&nbsp;of&nbsp;<font color=Blue>operator</font>&nbsp;over&nbsp;loading&nbsp;<font color=Blue>using</font>&nbsp;a&nbsp;member&nbsp;function.&nbsp;Here&nbsp;an&nbsp;object&nbsp;is&nbsp;passed&nbsp;as&nbsp;an&nbsp;argument&nbsp;whose&nbsp;properties&nbsp;will&nbsp;be&nbsp;accessed&nbsp;<font color=Blue>using</font>&nbsp;<font color=Blue>this</font>&nbsp;object,&nbsp;the&nbsp;object&nbsp;which&nbsp;will&nbsp;call&nbsp;<font color=Blue>this</font>&nbsp;<font color=Blue>operator</font>&nbsp;can&nbsp;be&nbsp;accessed&nbsp;<font color=Blue>using</font>&nbsp;<font color=Blue>this</font>&nbsp;<font color=Blue>operator</font>&nbsp;as&nbsp;explained&nbsp;below: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Blue>class</font>&nbsp;Box <BR />{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;getVolume(<font color=Blue>void</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;length&nbsp;*&nbsp;breadth&nbsp;*&nbsp;height; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;setLength(&nbsp;<font color=Blue>double</font>&nbsp;len&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length&nbsp;=&nbsp;len; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;setBreadth(&nbsp;<font color=Blue>double</font>&nbsp;bre&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;breadth&nbsp;=&nbsp;bre; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;setHeight(&nbsp;<font color=Blue>double</font>&nbsp;hei&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height&nbsp;=&nbsp;hei; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Overload&nbsp;+&nbsp;operator&nbsp;to&nbsp;add&nbsp;two&nbsp;Box&nbsp;objects.</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Box&nbsp;<font color=Blue>operator</font>+(<font color=Blue>const</font>&nbsp;Box&amp;&nbsp;b) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Box&nbsp;box; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;box.length&nbsp;=&nbsp;<font color=Blue>this</font>-&gt;length&nbsp;+&nbsp;b.length; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;box.breadth&nbsp;=&nbsp;<font color=Blue>this</font>-&gt;breadth&nbsp;+&nbsp;b.breadth; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;box.height&nbsp;=&nbsp;<font color=Blue>this</font>-&gt;height&nbsp;+&nbsp;b.height; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;box; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>private</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;length;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Length&nbsp;of&nbsp;a&nbsp;box</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;breadth;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Breadth&nbsp;of&nbsp;a&nbsp;box</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;height;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Height&nbsp;of&nbsp;a&nbsp;box</font> <BR />}; <BR /><font color=Green>//&nbsp;Main&nbsp;function&nbsp;for&nbsp;the&nbsp;program</font> <BR /><font color=Blue>int</font>&nbsp;main(&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;Box&nbsp;Box1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Declare&nbsp;Box1&nbsp;of&nbsp;type&nbsp;Box</font> <BR />&nbsp;&nbsp;&nbsp;Box&nbsp;Box2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Declare&nbsp;Box2&nbsp;of&nbsp;type&nbsp;Box</font> <BR />&nbsp;&nbsp;&nbsp;Box&nbsp;Box3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Declare&nbsp;Box3&nbsp;of&nbsp;type&nbsp;Box</font> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;volume&nbsp;=&nbsp;<font color=Maroon>0</font><font color=Maroon>.0</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Store&nbsp;the&nbsp;volume&nbsp;of&nbsp;a&nbsp;box&nbsp;here</font> <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;box&nbsp;1&nbsp;specification</font> <BR />&nbsp;&nbsp;&nbsp;Box1.setLength(<font color=Maroon>6</font><font color=Maroon>.0</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;Box1.setBreadth(<font color=Maroon>7</font><font color=Maroon>.0</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;Box1.setHeight(<font color=Maroon>5</font><font color=Maroon>.0</font>); <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;box&nbsp;2&nbsp;specification</font> <BR />&nbsp;&nbsp;&nbsp;Box2.setLength(<font color=Maroon>12</font><font color=Maroon>.0</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;Box2.setBreadth(<font color=Maroon>13</font><font color=Maroon>.0</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;Box2.setHeight(<font color=Maroon>10</font><font color=Maroon>.0</font>); <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;volume&nbsp;of&nbsp;box&nbsp;1</font> <BR />&nbsp;&nbsp;&nbsp;volume&nbsp;=&nbsp;Box1.getVolume(); <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Volume&nbsp;of&nbsp;Box1&nbsp;:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;volume&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;volume&nbsp;of&nbsp;box&nbsp;2</font> <BR />&nbsp;&nbsp;&nbsp;volume&nbsp;=&nbsp;Box2.getVolume(); <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Volume&nbsp;of&nbsp;Box2&nbsp;:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;volume&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Add&nbsp;two&nbsp;object&nbsp;as&nbsp;follows:</font> <BR />&nbsp;&nbsp;&nbsp;Box3&nbsp;=&nbsp;Box1&nbsp;+&nbsp;Box2; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;volume&nbsp;of&nbsp;box&nbsp;3</font> <BR />&nbsp;&nbsp;&nbsp;volume&nbsp;=&nbsp;Box3.getVolume(); <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Volume&nbsp;of&nbsp;Box3&nbsp;:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;volume&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />When&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp;it&nbsp;produces&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Volume&nbsp;of&nbsp;Box1&nbsp;:&nbsp;<font color=Maroon>210</font> <BR />Volume&nbsp;of&nbsp;Box2&nbsp;:&nbsp;<font color=Maroon>1560</font> <BR />Volume&nbsp;of&nbsp;Box3&nbsp;:&nbsp;<font color=Maroon>5400</font></div>
    ]]>
        </string>
  
     <string name="oopPolymorphismAndVirtualFunctions" formatted="false">
       <![CDATA[ 
    <div>The&nbsp;word&nbsp;polymorphism&nbsp;means&nbsp;having&nbsp;many&nbsp;forms.&nbsp;Typically,&nbsp;polymorphism&nbsp;occurs&nbsp;when&nbsp;there&nbsp; <BR />is&nbsp;a&nbsp;hierarchy&nbsp;of&nbsp;classes&nbsp;<font color=Blue>and</font>&nbsp;they&nbsp;are&nbsp;related&nbsp;by&nbsp;inheritance. <BR /> <BR />C++&nbsp;polymorphism&nbsp;means&nbsp;that&nbsp;a&nbsp;call&nbsp;to&nbsp;a&nbsp;member&nbsp;function&nbsp;will&nbsp;cause&nbsp;a&nbsp;different&nbsp;function&nbsp; <BR />to&nbsp;be&nbsp;executed&nbsp;depending&nbsp;on&nbsp;the&nbsp;type&nbsp;of&nbsp;object&nbsp;that&nbsp;invokes&nbsp;the&nbsp;function. <BR /> <BR />Consider&nbsp;the&nbsp;following&nbsp;example&nbsp;where&nbsp;a&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;has&nbsp;been&nbsp;derived&nbsp;by&nbsp;other&nbsp;two&nbsp;classes: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt;&nbsp; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR />&nbsp; <BR /><font color=Blue>class</font>&nbsp;Shape&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>protected</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;width,&nbsp;height; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Shape(&nbsp;<font color=Blue>int</font>&nbsp;a=<font color=Maroon>0</font>,&nbsp;<font color=Blue>int</font>&nbsp;b=<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width&nbsp;=&nbsp;a; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height&nbsp;=&nbsp;b; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;area() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Parent&nbsp;class&nbsp;area&nbsp;:"</font>&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Blue>class</font>&nbsp;Rectangle:&nbsp;<font color=Blue>public</font>&nbsp;Shape{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rectangle(&nbsp;<font color=Blue>int</font>&nbsp;a=<font color=Maroon>0</font>,&nbsp;<font color=Blue>int</font>&nbsp;b=<font color=Maroon>0</font>):Shape(a,&nbsp;b)&nbsp;{&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;area&nbsp;() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Rectangle&nbsp;class&nbsp;area&nbsp;:"</font>&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(width&nbsp;*&nbsp;height);&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /><font color=Blue>class</font>&nbsp;Triangle:&nbsp;<font color=Blue>public</font>&nbsp;Shape{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Triangle(&nbsp;<font color=Blue>int</font>&nbsp;a=<font color=Maroon>0</font>,&nbsp;<font color=Blue>int</font>&nbsp;b=<font color=Maroon>0</font>):Shape(a,&nbsp;b)&nbsp;{&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;area&nbsp;() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Triangle&nbsp;class&nbsp;area&nbsp;:"</font>&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(width&nbsp;*&nbsp;height&nbsp;/&nbsp;<font color=Maroon>2</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR /><font color=Green>//&nbsp;Main&nbsp;function&nbsp;for&nbsp;the&nbsp;program</font> <BR /><font color=Blue>int</font>&nbsp;main(&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;Shape&nbsp;*shape; <BR />&nbsp;&nbsp;&nbsp;Rectangle&nbsp;rec(<font color=Maroon>10</font>,<font color=Maroon>7</font>); <BR />&nbsp;&nbsp;&nbsp;Triangle&nbsp;&nbsp;tri(<font color=Maroon>10</font>,<font color=Maroon>5</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;store&nbsp;the&nbsp;address&nbsp;of&nbsp;Rectangle</font> <BR />&nbsp;&nbsp;&nbsp;shape&nbsp;=&nbsp;&amp;rec; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;call&nbsp;rectangle&nbsp;area.</font> <BR />&nbsp;&nbsp;&nbsp;shape-&gt;area(); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;store&nbsp;the&nbsp;address&nbsp;of&nbsp;Triangle</font> <BR />&nbsp;&nbsp;&nbsp;shape&nbsp;=&nbsp;&amp;tri; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;call&nbsp;triangle&nbsp;area.</font> <BR />&nbsp;&nbsp;&nbsp;shape-&gt;area(); <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />When&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp;it&nbsp;produces&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Parent&nbsp;<font color=Blue>class</font>&nbsp;area <BR />Parent&nbsp;<font color=Blue>class</font>&nbsp;area <BR /> <BR />The&nbsp;reason&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;incorrect&nbsp;output&nbsp;is&nbsp;that&nbsp;the&nbsp;call&nbsp;of&nbsp;the&nbsp;function&nbsp;area()&nbsp;is&nbsp;being&nbsp;set&nbsp; <BR />once&nbsp;by&nbsp;the&nbsp;compiler&nbsp;as&nbsp;the&nbsp;version&nbsp;defined&nbsp;in&nbsp;the&nbsp;base&nbsp;<font color=Blue>class</font>.&nbsp;This&nbsp;is&nbsp;called&nbsp;<font color=Blue>static</font>&nbsp; <BR />resolution&nbsp;of&nbsp;the&nbsp;function&nbsp;call,&nbsp;<font color=Blue>or</font>&nbsp;<font color=Blue>static</font>&nbsp;linkage&nbsp;-&nbsp;the&nbsp;function&nbsp;call&nbsp;is&nbsp;fixed&nbsp;before&nbsp; <BR />the&nbsp;program&nbsp;is&nbsp;executed.&nbsp;This&nbsp;is&nbsp;also&nbsp;sometimes&nbsp;called&nbsp;early&nbsp;binding&nbsp;because&nbsp;the&nbsp;area()&nbsp; <BR />function&nbsp;is&nbsp;set&nbsp;during&nbsp;the&nbsp;compilation&nbsp;of&nbsp;the&nbsp;program. <BR /> <BR />But&nbsp;now,&nbsp;lets&nbsp;make&nbsp;a&nbsp;slight&nbsp;modification&nbsp;in&nbsp;our&nbsp;program&nbsp;<font color=Blue>and</font>&nbsp;precede&nbsp;the&nbsp;declaration&nbsp;of&nbsp; <BR />area()&nbsp;in&nbsp;the&nbsp;Shape&nbsp;<font color=Blue>class</font>&nbsp;with&nbsp;the&nbsp;keyword&nbsp;<font color=Blue>virtual</font>&nbsp;so&nbsp;that&nbsp;it&nbsp;looks&nbsp;like&nbsp;<font color=Blue>this</font>: <BR /> <BR /><font color=Blue>class</font>&nbsp;Shape&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>protected</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;width,&nbsp;height; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Shape(&nbsp;<font color=Blue>int</font>&nbsp;a=<font color=Maroon>0</font>,&nbsp;<font color=Blue>int</font>&nbsp;b=<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width&nbsp;=&nbsp;a; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height&nbsp;=&nbsp;b; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>int</font>&nbsp;area() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Parent&nbsp;class&nbsp;area&nbsp;:"</font>&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}; <BR /> <BR />After&nbsp;<font color=Blue>this</font>&nbsp;slight&nbsp;modification,&nbsp;when&nbsp;the&nbsp;previous&nbsp;example&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp; <BR />it&nbsp;produces&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Rectangle&nbsp;<font color=Blue>class</font>&nbsp;area <BR />Triangle&nbsp;<font color=Blue>class</font>&nbsp;area <BR /> <BR />This&nbsp;time,&nbsp;the&nbsp;compiler&nbsp;looks&nbsp;at&nbsp;the&nbsp;contents&nbsp;of&nbsp;the&nbsp;pointer&nbsp;instead&nbsp;of&nbsp;its&nbsp;type.&nbsp; <BR />Hence,&nbsp;since&nbsp;addresses&nbsp;of&nbsp;objects&nbsp;of&nbsp;tri&nbsp;<font color=Blue>and</font>&nbsp;rec&nbsp;classes&nbsp;are&nbsp;stored&nbsp;in&nbsp;*shape&nbsp;the&nbsp; <BR />respective&nbsp;area()&nbsp;function&nbsp;is&nbsp;called. <BR /> <BR />As&nbsp;you&nbsp;can&nbsp;see,&nbsp;each&nbsp;of&nbsp;the&nbsp;child&nbsp;classes&nbsp;has&nbsp;a&nbsp;separate&nbsp;implementation&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp; <BR />function&nbsp;area().&nbsp;This&nbsp;is&nbsp;how&nbsp;polymorphism&nbsp;is&nbsp;generally&nbsp;used.&nbsp;You&nbsp;have&nbsp;different&nbsp; <BR />classes&nbsp;with&nbsp;a&nbsp;function&nbsp;of&nbsp;the&nbsp;same&nbsp;name,&nbsp;<font color=Blue>and</font>&nbsp;even&nbsp;the&nbsp;same&nbsp;parameters,&nbsp;but&nbsp;with&nbsp; <BR />different&nbsp;implementations. <BR /> <BR />Virtual&nbsp;Function: <BR /> <BR />A&nbsp;<font color=Blue>virtual</font>&nbsp;function&nbsp;is&nbsp;a&nbsp;function&nbsp;in&nbsp;a&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;that&nbsp;is&nbsp;declared&nbsp;<font color=Blue>using</font>&nbsp;the&nbsp;keyword&nbsp;<font color=Blue>virtual</font>.&nbsp; <BR />Defining&nbsp;in&nbsp;a&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;a&nbsp;<font color=Blue>virtual</font>&nbsp;function,&nbsp;with&nbsp;another&nbsp;version&nbsp;in&nbsp;a&nbsp;derived&nbsp;<font color=Blue>class</font>,&nbsp; <BR />signals&nbsp;to&nbsp;the&nbsp;compiler&nbsp;that&nbsp;we&nbsp;dont&nbsp;want&nbsp;<font color=Blue>static</font>&nbsp;linkage&nbsp;<font color=Blue>for</font>&nbsp;<font color=Blue>this</font>&nbsp;function. <BR /> <BR />What&nbsp;we&nbsp;<font color=Blue>do</font>&nbsp;want&nbsp;is&nbsp;the&nbsp;selection&nbsp;of&nbsp;the&nbsp;function&nbsp;to&nbsp;be&nbsp;called&nbsp;at&nbsp;any&nbsp;given&nbsp;point&nbsp;in&nbsp;the&nbsp; <BR />program&nbsp;to&nbsp;be&nbsp;based&nbsp;on&nbsp;the&nbsp;kind&nbsp;of&nbsp;object&nbsp;<font color=Blue>for</font>&nbsp;which&nbsp;it&nbsp;is&nbsp;called.&nbsp;This&nbsp;sort&nbsp;of&nbsp;operation&nbsp; <BR />is&nbsp;referred&nbsp;to&nbsp;as&nbsp;dynamic&nbsp;linkage,&nbsp;<font color=Blue>or</font>&nbsp;late&nbsp;binding. <BR /> <BR />Pure&nbsp;Virtual&nbsp;Functions: <BR /> <BR />Its&nbsp;possible&nbsp;that&nbsp;youd&nbsp;want&nbsp;to&nbsp;<font color=Blue>include</font>&nbsp;a&nbsp;<font color=Blue>virtual</font>&nbsp;function&nbsp;in&nbsp;a&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;so&nbsp;that&nbsp;it&nbsp; <BR />may&nbsp;be&nbsp;redefined&nbsp;in&nbsp;a&nbsp;derived&nbsp;<font color=Blue>class</font>&nbsp;to&nbsp;suit&nbsp;the&nbsp;objects&nbsp;of&nbsp;that&nbsp;<font color=Blue>class</font>,&nbsp;but&nbsp;that&nbsp;there&nbsp; <BR />is&nbsp;no&nbsp;meaningful&nbsp;definition&nbsp;you&nbsp;could&nbsp;give&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;function&nbsp;in&nbsp;the&nbsp;base&nbsp;<font color=Blue>class</font>. <BR /> <BR />We&nbsp;can&nbsp;change&nbsp;the&nbsp;<font color=Blue>virtual</font>&nbsp;function&nbsp;area()&nbsp;in&nbsp;the&nbsp;base&nbsp;<font color=Blue>class</font>&nbsp;to&nbsp;the&nbsp;following: <BR /> <BR /><font color=Blue>class</font>&nbsp;Shape&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>protected</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;width,&nbsp;height; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Shape(&nbsp;<font color=Blue>int</font>&nbsp;a=<font color=Maroon>0</font>,&nbsp;<font color=Blue>int</font>&nbsp;b=<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width&nbsp;=&nbsp;a; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height&nbsp;=&nbsp;b; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;pure&nbsp;virtual&nbsp;function</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>int</font>&nbsp;area()&nbsp;=&nbsp;<font color=Maroon>0</font>; <BR />}; <BR /> <BR />The&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;tells&nbsp;the&nbsp;compiler&nbsp;that&nbsp;the&nbsp;function&nbsp;has&nbsp;no&nbsp;body&nbsp;<font color=Blue>and</font>&nbsp;above&nbsp;<font color=Blue>virtual</font>&nbsp;function&nbsp; <BR />will&nbsp;be&nbsp;called&nbsp;pure&nbsp;<font color=Blue>virtual</font>&nbsp;function.</div>
      ]]>
        </string>
        <string name="oopDataAbstraction" formatted="false">
       <![CDATA[  
     <div>Data&nbsp;Abstraction&nbsp;Example: <BR /> <BR />Any&nbsp;C++&nbsp;program&nbsp;where&nbsp;you&nbsp;implement&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;with&nbsp;<font color=Blue>public</font>&nbsp;<font color=Blue>and</font>&nbsp;<font color=Blue>private</font>&nbsp;members&nbsp;is&nbsp;an&nbsp;example&nbsp; <BR />of&nbsp;data&nbsp;abstraction.&nbsp;Consider&nbsp;the&nbsp;following&nbsp;example: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Blue>class</font>&nbsp;Adder{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;constructor</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adder(<font color=Blue>int</font>&nbsp;i&nbsp;=&nbsp;<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total&nbsp;=&nbsp;i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;interface&nbsp;to&nbsp;outside&nbsp;world</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;addNum(<font color=Blue>int</font>&nbsp;number) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total&nbsp;+=&nbsp;number; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;interface&nbsp;to&nbsp;outside&nbsp;world</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;getTotal() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;total; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>private</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;hidden&nbsp;data&nbsp;from&nbsp;outside&nbsp;world</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;total; <BR />}; <BR /><font color=Blue>int</font>&nbsp;main(&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;Adder&nbsp;a; <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;a.addNum(<font color=Maroon>10</font>); <BR />&nbsp;&nbsp;&nbsp;a.addNum(<font color=Maroon>20</font>); <BR />&nbsp;&nbsp;&nbsp;a.addNum(<font color=Maroon>30</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Total&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;a.getTotal()&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />When&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp;it&nbsp;produces&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Total&nbsp;<font color=Maroon>60</font> <BR /> <BR />Above&nbsp;<font color=Blue>class</font>&nbsp;adds&nbsp;numbers&nbsp;together,&nbsp;<font color=Blue>and</font>&nbsp;returns&nbsp;the&nbsp;sum.&nbsp;The&nbsp;<font color=Blue>public</font>&nbsp;members&nbsp;addNum&nbsp;<font color=Blue>and</font>&nbsp; <BR />getTotal&nbsp;are&nbsp;the&nbsp;interfaces&nbsp;to&nbsp;the&nbsp;outside&nbsp;world&nbsp;<font color=Blue>and</font>&nbsp;a&nbsp;user&nbsp;needs&nbsp;to&nbsp;know&nbsp;them&nbsp;to&nbsp;use&nbsp; <BR />the&nbsp;<font color=Blue>class</font>.&nbsp;The&nbsp;<font color=Blue>private</font>&nbsp;member&nbsp;total&nbsp;is&nbsp;something&nbsp;that&nbsp;the&nbsp;user&nbsp;doesnt&nbsp;need&nbsp;to&nbsp;know&nbsp;about,&nbsp; <BR />but&nbsp;is&nbsp;needed&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp;to&nbsp;operate&nbsp;properly. <BR /> <BR />Designing&nbsp;Strategy: <BR /> <BR />Abstraction&nbsp;separates&nbsp;code&nbsp;into&nbsp;interface&nbsp;<font color=Blue>and</font>&nbsp;implementation.&nbsp;So&nbsp;<font color=Blue>while</font>&nbsp;designing&nbsp;your&nbsp; <BR />component,&nbsp;you&nbsp;must&nbsp;keep&nbsp;interface&nbsp;independent&nbsp;of&nbsp;the&nbsp;implementation&nbsp;so&nbsp;that&nbsp;<font color=Blue>if</font>&nbsp;you&nbsp; <BR />change&nbsp;underlying&nbsp;implementation&nbsp;then&nbsp;interface&nbsp;would&nbsp;remain&nbsp;intact. <BR /> <BR />In&nbsp;<font color=Blue>this</font>&nbsp;<font color=Blue>case</font>&nbsp;whatever&nbsp;programs&nbsp;are&nbsp;<font color=Blue>using</font>&nbsp;these&nbsp;interfaces,&nbsp;they&nbsp;would&nbsp;<font color=Blue>not</font>&nbsp;be&nbsp;impacted&nbsp; <BR /><font color=Blue>and</font>&nbsp;would&nbsp;just&nbsp;need&nbsp;a&nbsp;recompilation&nbsp;with&nbsp;the&nbsp;latest&nbsp;implementation.</div>
       ]]>
        </string>
     
         <string name="oopEncapsulation" formatted="false">
       <![CDATA[ 
        <div>Data&nbsp;Abstraction&nbsp;Example: <BR /> <BR />Any&nbsp;C++&nbsp;program&nbsp;where&nbsp;you&nbsp;implement&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp;with&nbsp;<font color=Blue>public</font>&nbsp;<font color=Blue>and</font>&nbsp;<font color=Blue>private</font>&nbsp;members&nbsp;is&nbsp;an&nbsp;example&nbsp; <BR />of&nbsp;data&nbsp;abstraction.&nbsp;Consider&nbsp;the&nbsp;following&nbsp;example: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Blue>class</font>&nbsp;Adder{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;constructor</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adder(<font color=Blue>int</font>&nbsp;i&nbsp;=&nbsp;<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total&nbsp;=&nbsp;i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;interface&nbsp;to&nbsp;outside&nbsp;world</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;addNum(<font color=Blue>int</font>&nbsp;number) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total&nbsp;+=&nbsp;number; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;interface&nbsp;to&nbsp;outside&nbsp;world</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;getTotal() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;total; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>private</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;hidden&nbsp;data&nbsp;from&nbsp;outside&nbsp;world</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;total; <BR />}; <BR /><font color=Blue>int</font>&nbsp;main(&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;Adder&nbsp;a; <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;a.addNum(<font color=Maroon>10</font>); <BR />&nbsp;&nbsp;&nbsp;a.addNum(<font color=Maroon>20</font>); <BR />&nbsp;&nbsp;&nbsp;a.addNum(<font color=Maroon>30</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Total&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;a.getTotal()&nbsp;&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />When&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp;it&nbsp;produces&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Total&nbsp;<font color=Maroon>60</font> <BR /> <BR />Above&nbsp;<font color=Blue>class</font>&nbsp;adds&nbsp;numbers&nbsp;together,&nbsp;<font color=Blue>and</font>&nbsp;returns&nbsp;the&nbsp;sum.&nbsp;The&nbsp;<font color=Blue>public</font>&nbsp;members&nbsp;addNum&nbsp;<font color=Blue>and</font>&nbsp; <BR />getTotal&nbsp;are&nbsp;the&nbsp;interfaces&nbsp;to&nbsp;the&nbsp;outside&nbsp;world&nbsp;<font color=Blue>and</font>&nbsp;a&nbsp;user&nbsp;needs&nbsp;to&nbsp;know&nbsp;them&nbsp;to&nbsp;use&nbsp; <BR />the&nbsp;<font color=Blue>class</font>.&nbsp;The&nbsp;<font color=Blue>private</font>&nbsp;member&nbsp;total&nbsp;is&nbsp;something&nbsp;that&nbsp;the&nbsp;user&nbsp;doesnt&nbsp;need&nbsp;to&nbsp;know&nbsp;about,&nbsp; <BR />but&nbsp;is&nbsp;needed&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;<font color=Blue>class</font>&nbsp;to&nbsp;operate&nbsp;properly. <BR /> <BR />Designing&nbsp;Strategy: <BR /> <BR />Abstraction&nbsp;separates&nbsp;code&nbsp;into&nbsp;interface&nbsp;<font color=Blue>and</font>&nbsp;implementation.&nbsp;So&nbsp;<font color=Blue>while</font>&nbsp;designing&nbsp;your&nbsp; <BR />component,&nbsp;you&nbsp;must&nbsp;keep&nbsp;interface&nbsp;independent&nbsp;of&nbsp;the&nbsp;implementation&nbsp;so&nbsp;that&nbsp;<font color=Blue>if</font>&nbsp;you&nbsp; <BR />change&nbsp;underlying&nbsp;implementation&nbsp;then&nbsp;interface&nbsp;would&nbsp;remain&nbsp;intact. <BR /> <BR />In&nbsp;<font color=Blue>this</font>&nbsp;<font color=Blue>case</font>&nbsp;whatever&nbsp;programs&nbsp;are&nbsp;<font color=Blue>using</font>&nbsp;these&nbsp;interfaces,&nbsp;they&nbsp;would&nbsp;<font color=Blue>not</font>&nbsp;be&nbsp;impacted&nbsp; <BR /><font color=Blue>and</font>&nbsp;would&nbsp;just&nbsp;need&nbsp;a&nbsp;recompilation&nbsp;with&nbsp;the&nbsp;latest&nbsp;implementation.</div>
         ]]>
        </string>
        
          <string name="oopNameSpaces" formatted="false">
       <![CDATA[ 
         <div>A&nbsp;<font color=Blue>namespace</font>&nbsp;is&nbsp;designed&nbsp;to&nbsp;overcome&nbsp;<font color=Blue>this</font>&nbsp;difficulty&nbsp;<font color=Blue>and</font>&nbsp;is&nbsp;used&nbsp;as&nbsp;additional&nbsp;information&nbsp; <BR />to&nbsp;differentiate&nbsp;similar&nbsp;functions,&nbsp;classes,&nbsp;variables&nbsp;etc.&nbsp;with&nbsp;the&nbsp;same&nbsp;name&nbsp;available&nbsp; <BR />in&nbsp;different&nbsp;libraries.&nbsp;Using&nbsp;<font color=Blue>namespace</font>,&nbsp;you&nbsp;can&nbsp;define&nbsp;the&nbsp;context&nbsp;in&nbsp;which&nbsp;names&nbsp;are&nbsp; <BR />defined.&nbsp;In&nbsp;essence,&nbsp;a&nbsp;<font color=Blue>namespace</font>&nbsp;defines&nbsp;a&nbsp;scope. <BR /> <BR />Defining&nbsp;a&nbsp;Namespace: <BR /> <BR />A&nbsp;<font color=Blue>namespace</font>&nbsp;definition&nbsp;begins&nbsp;with&nbsp;the&nbsp;keyword&nbsp;<font color=Blue>namespace</font>&nbsp;followed&nbsp;by&nbsp;the&nbsp;<font color=Blue>namespace</font>&nbsp;name&nbsp; <BR />as&nbsp;follows: <BR /> <BR /><font color=Blue>namespace</font>&nbsp;namespace_name&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;code&nbsp;declarations</font> <BR />} <BR /> <BR />To&nbsp;call&nbsp;the&nbsp;<font color=Blue>namespace</font>-enabled&nbsp;version&nbsp;of&nbsp;either&nbsp;function&nbsp;<font color=Blue>or</font>&nbsp;variable,&nbsp;prepend&nbsp;the&nbsp;<font color=Blue>namespace</font>&nbsp;name&nbsp;as&nbsp;follows: <BR /> <BR />name::code;&nbsp;&nbsp;<font color=Green>//&nbsp;code&nbsp;could&nbsp;be&nbsp;variable&nbsp;or&nbsp;function.</font> <BR /> <BR />Let&nbsp;us&nbsp;see&nbsp;how&nbsp;<font color=Blue>namespace</font>&nbsp;scope&nbsp;the&nbsp;entities&nbsp;including&nbsp;variable&nbsp;<font color=Blue>and</font>&nbsp;functions: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Green>//&nbsp;first&nbsp;name&nbsp;space</font> <BR /><font color=Blue>namespace</font>&nbsp;first_space{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;func(){ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Inside&nbsp;first_space"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;} <BR />} <BR /><font color=Green>//&nbsp;second&nbsp;name&nbsp;space</font> <BR /><font color=Blue>namespace</font>&nbsp;second_space{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;func(){ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Inside&nbsp;second_space"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;} <BR />} <BR /><font color=Blue>int</font>&nbsp;main&nbsp;() <BR />{ <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Calls&nbsp;function&nbsp;from&nbsp;first&nbsp;name&nbsp;space.</font> <BR />&nbsp;&nbsp;&nbsp;first_space::func(); <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;Calls&nbsp;function&nbsp;from&nbsp;second&nbsp;name&nbsp;space.</font> <BR />&nbsp;&nbsp;&nbsp;second_space::func();&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />If&nbsp;we&nbsp;compile&nbsp;<font color=Blue>and</font>&nbsp;run&nbsp;above&nbsp;code,&nbsp;<font color=Blue>this</font>&nbsp;would&nbsp;produce&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Inside&nbsp;first_space <BR />Inside&nbsp;second_space <BR /> <BR />The&nbsp;<font color=Blue>using</font>&nbsp;directive: <BR /> <BR />You&nbsp;can&nbsp;also&nbsp;avoid&nbsp;prepending&nbsp;of&nbsp;namespaces&nbsp;with&nbsp;the&nbsp;<font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;directive.&nbsp; <BR />This&nbsp;directive&nbsp;tells&nbsp;the&nbsp;compiler&nbsp;that&nbsp;the&nbsp;subsequent&nbsp;code&nbsp;is&nbsp;making&nbsp;use&nbsp;of&nbsp;names&nbsp; <BR />in&nbsp;the&nbsp;specified&nbsp;<font color=Blue>namespace</font>.&nbsp;The&nbsp;<font color=Blue>namespace</font>&nbsp;is&nbsp;thus&nbsp;implied&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;following&nbsp;code: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Green>//&nbsp;first&nbsp;name&nbsp;space</font> <BR /><font color=Blue>namespace</font>&nbsp;first_space{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;func(){ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Inside&nbsp;first_space"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;} <BR />} <BR /><font color=Green>//&nbsp;second&nbsp;name&nbsp;space</font> <BR /><font color=Blue>namespace</font>&nbsp;second_space{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;func(){ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Inside&nbsp;second_space"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;} <BR />} <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;first_space; <BR /><font color=Blue>int</font>&nbsp;main&nbsp;() <BR />{ <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;This&nbsp;calls&nbsp;function&nbsp;from&nbsp;first&nbsp;name&nbsp;space.</font> <BR />&nbsp;&nbsp;&nbsp;func(); <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />If&nbsp;we&nbsp;compile&nbsp;<font color=Blue>and</font>&nbsp;run&nbsp;above&nbsp;code,&nbsp;<font color=Blue>this</font>&nbsp;would&nbsp;produce&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Inside&nbsp;first_space <BR /> <BR />The&nbsp;<font color=Blue>using</font>&nbsp;directive&nbsp;can&nbsp;also&nbsp;be&nbsp;used&nbsp;to&nbsp;refer&nbsp;to&nbsp;a&nbsp;particular&nbsp;item&nbsp;within&nbsp;a&nbsp;<font color=Blue>namespace</font>.&nbsp; <BR />For&nbsp;example,&nbsp;<font color=Blue>if</font>&nbsp;the&nbsp;only&nbsp;part&nbsp;of&nbsp;the&nbsp;<font color=Blue>std</font>&nbsp;<font color=Blue>namespace</font>&nbsp;that&nbsp;you&nbsp;intend&nbsp;to&nbsp;use&nbsp;is&nbsp;<font color=Blue>cout</font>,&nbsp; <BR />you&nbsp;can&nbsp;refer&nbsp;to&nbsp;it&nbsp;as&nbsp;follows: <BR /> <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>std</font>::<font color=Blue>cout</font>; <BR /> <BR />Subsequent&nbsp;code&nbsp;can&nbsp;refer&nbsp;to&nbsp;<font color=Blue>cout</font>&nbsp;without&nbsp;prepending&nbsp;the&nbsp;<font color=Blue>namespace</font>,&nbsp;but&nbsp;other&nbsp;items&nbsp; <BR />in&nbsp;the&nbsp;<font color=Blue>std</font>&nbsp;<font color=Blue>namespace</font>&nbsp;will&nbsp;still&nbsp;need&nbsp;to&nbsp;be&nbsp;<font color=Blue>explicit</font>&nbsp;as&nbsp;follows: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>std</font>::<font color=Blue>cout</font>; <BR /> <BR /><font color=Blue>int</font>&nbsp;main&nbsp;() <BR />{ <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"std::endl&nbsp;is&nbsp;used&nbsp;with&nbsp;std!"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>std</font>::<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />If&nbsp;we&nbsp;compile&nbsp;<font color=Blue>and</font>&nbsp;run&nbsp;above&nbsp;code,&nbsp;<font color=Blue>this</font>&nbsp;would&nbsp;produce&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR /><font color=Blue>std</font>::<font color=Blue>endl</font>&nbsp;is&nbsp;used&nbsp;with&nbsp;<font color=Blue>std</font>! <BR /> <BR />Names&nbsp;introduced&nbsp;in&nbsp;a&nbsp;<font color=Blue>using</font>&nbsp;directive&nbsp;obey&nbsp;normal&nbsp;scope&nbsp;rules.&nbsp;The&nbsp;name&nbsp;is&nbsp;visible&nbsp; <BR />from&nbsp;the&nbsp;point&nbsp;of&nbsp;the&nbsp;<font color=Blue>using</font>&nbsp;directive&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;scope&nbsp;in&nbsp;which&nbsp;the&nbsp;directive&nbsp; <BR />is&nbsp;found.&nbsp;Entities&nbsp;with&nbsp;the&nbsp;same&nbsp;name&nbsp;defined&nbsp;in&nbsp;an&nbsp;outer&nbsp;scope&nbsp;are&nbsp;hidden. <BR />Discontiguous&nbsp;Namespaces: <BR /> <BR />A&nbsp;<font color=Blue>namespace</font>&nbsp;can&nbsp;be&nbsp;defined&nbsp;in&nbsp;several&nbsp;parts&nbsp;<font color=Blue>and</font>&nbsp;so&nbsp;a&nbsp;<font color=Blue>namespace</font>&nbsp;is&nbsp;made&nbsp;up&nbsp;of&nbsp;the&nbsp;sum&nbsp;of&nbsp; <BR />its&nbsp;separately&nbsp;defined&nbsp;parts.&nbsp;The&nbsp;separate&nbsp;parts&nbsp;of&nbsp;a&nbsp;<font color=Blue>namespace</font>&nbsp;can&nbsp;be&nbsp;spread&nbsp;over&nbsp; <BR />multiple&nbsp;files. <BR /> <BR />So,&nbsp;<font color=Blue>if</font>&nbsp;one&nbsp;part&nbsp;of&nbsp;the&nbsp;<font color=Blue>namespace</font>&nbsp;requires&nbsp;a&nbsp;name&nbsp;defined&nbsp;in&nbsp;another&nbsp;file,&nbsp;that&nbsp;name&nbsp; <BR />must&nbsp;still&nbsp;be&nbsp;declared.&nbsp;Writing&nbsp;a&nbsp;following&nbsp;<font color=Blue>namespace</font>&nbsp;definition&nbsp;either&nbsp;defines&nbsp;a&nbsp; <BR /><font color=Blue>new</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>or</font>&nbsp;adds&nbsp;<font color=Blue>new</font>&nbsp;elements&nbsp;to&nbsp;an&nbsp;existing&nbsp;one: <BR /> <BR /><font color=Blue>namespace</font>&nbsp;namespace_name&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;code&nbsp;declarations</font> <BR />} <BR /> <BR />Nested&nbsp;Namespaces: <BR /> <BR />Namespaces&nbsp;can&nbsp;be&nbsp;nested&nbsp;where&nbsp;you&nbsp;can&nbsp;define&nbsp;one&nbsp;<font color=Blue>namespace</font>&nbsp;inside&nbsp;another&nbsp;name&nbsp; <BR />space&nbsp;as&nbsp;follows: <BR /> <BR /><font color=Blue>namespace</font>&nbsp;namespace_name1&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;code&nbsp;declarations</font> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>namespace</font>&nbsp;namespace_name2&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;code&nbsp;declarations</font> <BR />&nbsp;&nbsp;&nbsp;} <BR />} <BR /> <BR />You&nbsp;can&nbsp;access&nbsp;members&nbsp;of&nbsp;nested&nbsp;<font color=Blue>namespace</font>&nbsp;by&nbsp;<font color=Blue>using</font>&nbsp;resultion&nbsp;operators&nbsp;as&nbsp;follows: <BR /> <BR /><font color=Green>//&nbsp;to&nbsp;access&nbsp;members&nbsp;of&nbsp;namespace_name2</font> <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;namespace_name1::namespace_name2; <BR /> <BR /><font color=Green>//&nbsp;to&nbsp;access&nbsp;members&nbsp;of&nbsp;namespace:name1</font> <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;namespace_name1; <BR /> <BR />In&nbsp;the&nbsp;above&nbsp;statements&nbsp;<font color=Blue>if</font>&nbsp;you&nbsp;are&nbsp;<font color=Blue>using</font>&nbsp;namespace_name1,&nbsp;then&nbsp;it&nbsp;will&nbsp;make&nbsp;elements&nbsp; <BR />of&nbsp;namespace_name2&nbsp;available&nbsp;in&nbsp;the&nbsp;scope&nbsp;as&nbsp;follows: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Green>//&nbsp;first&nbsp;name&nbsp;space</font> <BR /><font color=Blue>namespace</font>&nbsp;first_space{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;func(){ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Inside&nbsp;first_space"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;second&nbsp;name&nbsp;space</font> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>namespace</font>&nbsp;second_space{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;func(){ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Inside&nbsp;second_space"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;} <BR />} <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;first_space::second_space; <BR /><font color=Blue>int</font>&nbsp;main&nbsp;() <BR />{ <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;This&nbsp;calls&nbsp;function&nbsp;from&nbsp;first&nbsp;name&nbsp;space.</font> <BR />&nbsp;&nbsp;&nbsp;func(); <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />If&nbsp;we&nbsp;compile&nbsp;<font color=Blue>and</font>&nbsp;run&nbsp;above&nbsp;code,&nbsp;<font color=Blue>this</font>&nbsp;would&nbsp;produce&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Inside&nbsp;second_space</div>
         ]]>
        </string>
        
          <string name="oopFileHandling" formatted="false">
       <![CDATA[ 
          <div>Writing&nbsp;to&nbsp;a&nbsp;File: <BR /> <BR />While&nbsp;doing&nbsp;C++&nbsp;programming,&nbsp;you&nbsp;write&nbsp;information&nbsp;to&nbsp;a&nbsp;file&nbsp;from&nbsp;your&nbsp;program&nbsp;<font color=Blue>using</font>&nbsp;the&nbsp;stream&nbsp;insertion&nbsp;<font color=Blue>operator</font>&nbsp;(&lt;&lt;)&nbsp;just&nbsp;as&nbsp;you&nbsp;use&nbsp;that&nbsp;<font color=Blue>operator</font>&nbsp;to&nbsp;output&nbsp;information&nbsp;to&nbsp;the&nbsp;screen.&nbsp;The&nbsp;only&nbsp;difference&nbsp;is&nbsp;that&nbsp;you&nbsp;use&nbsp;an&nbsp;ofstream&nbsp;<font color=Blue>or</font>&nbsp;fstream&nbsp;object&nbsp;instead&nbsp;of&nbsp;the&nbsp;<font color=Blue>cout</font>&nbsp;object. <BR />Reading&nbsp;from&nbsp;a&nbsp;File: <BR /> <BR />You&nbsp;read&nbsp;information&nbsp;from&nbsp;a&nbsp;file&nbsp;into&nbsp;your&nbsp;program&nbsp;<font color=Blue>using</font>&nbsp;the&nbsp;stream&nbsp;extraction&nbsp;<font color=Blue>operator</font>&nbsp;(&gt;&gt;)&nbsp;just&nbsp;as&nbsp;you&nbsp;use&nbsp;that&nbsp;<font color=Blue>operator</font>&nbsp;to&nbsp;input&nbsp;information&nbsp;from&nbsp;the&nbsp;keyboard.&nbsp;The&nbsp;only&nbsp;difference&nbsp;is&nbsp;that&nbsp;you&nbsp;use&nbsp;an&nbsp;ifstream&nbsp;<font color=Blue>or</font>&nbsp;fstream&nbsp;object&nbsp;instead&nbsp;of&nbsp;the&nbsp;<font color=Blue>cin</font>&nbsp;object. <BR />Read&nbsp;&amp;&nbsp;Write&nbsp;Example: <BR /> <BR />Following&nbsp;is&nbsp;the&nbsp;C++&nbsp;program&nbsp;which&nbsp;opens&nbsp;a&nbsp;file&nbsp;in&nbsp;reading&nbsp;<font color=Blue>and</font>&nbsp;writing&nbsp;mode.&nbsp;After&nbsp;writing&nbsp;information&nbsp;inputted&nbsp;by&nbsp;the&nbsp;user&nbsp;to&nbsp;a&nbsp;file&nbsp;named&nbsp;afile.dat,&nbsp;the&nbsp;program&nbsp;reads&nbsp;information&nbsp;from&nbsp;the&nbsp;file&nbsp;<font color=Blue>and</font>&nbsp;outputs&nbsp;it&nbsp;onto&nbsp;the&nbsp;screen: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;fstream&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR />&nbsp; <BR /><font color=Blue>int</font>&nbsp;main&nbsp;() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;data[<font color=Maroon>100</font>]; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;open&nbsp;a&nbsp;file&nbsp;in&nbsp;write&nbsp;mode.</font> <BR />&nbsp;&nbsp;&nbsp;ofstream&nbsp;outfile; <BR />&nbsp;&nbsp;&nbsp;outfile.open(<font color=Maroon>"afile.dat"</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Writing&nbsp;to&nbsp;the&nbsp;file"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Enter&nbsp;your&nbsp;name:&nbsp;"</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>.getline(data,&nbsp;<font color=Maroon>100</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;write&nbsp;inputted&nbsp;data&nbsp;into&nbsp;the&nbsp;file.</font> <BR />&nbsp;&nbsp;&nbsp;outfile&nbsp;&lt;&lt;&nbsp;data&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Enter&nbsp;your&nbsp;age:&nbsp;"</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;data; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>.ignore(); <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;again&nbsp;write&nbsp;inputted&nbsp;data&nbsp;into&nbsp;the&nbsp;file.</font> <BR />&nbsp;&nbsp;&nbsp;outfile&nbsp;&lt;&lt;&nbsp;data&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;close&nbsp;the&nbsp;opened&nbsp;file.</font> <BR />&nbsp;&nbsp;&nbsp;outfile.close(); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;open&nbsp;a&nbsp;file&nbsp;in&nbsp;read&nbsp;mode.</font> <BR />&nbsp;&nbsp;&nbsp;ifstream&nbsp;infile;&nbsp; <BR />&nbsp;&nbsp;&nbsp;infile.open(<font color=Maroon>"afile.dat"</font>);&nbsp; <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Reading&nbsp;from&nbsp;the&nbsp;file"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;infile&nbsp;&gt;&gt;&nbsp;data;&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;write&nbsp;the&nbsp;data&nbsp;at&nbsp;the&nbsp;screen.</font> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;data&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;again&nbsp;read&nbsp;the&nbsp;data&nbsp;from&nbsp;the&nbsp;file&nbsp;and&nbsp;display&nbsp;it.</font> <BR />&nbsp;&nbsp;&nbsp;infile&nbsp;&gt;&gt;&nbsp;data;&nbsp; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;data&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>;&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;close&nbsp;the&nbsp;opened&nbsp;file.</font> <BR />&nbsp;&nbsp;&nbsp;infile.close(); <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />When&nbsp;the&nbsp;above&nbsp;code&nbsp;is&nbsp;compiled&nbsp;<font color=Blue>and</font>&nbsp;executed,&nbsp;it&nbsp;produces&nbsp;the&nbsp;following&nbsp;sample&nbsp;input&nbsp;<font color=Blue>and</font>&nbsp;output: <BR /> <BR />$./a.out <BR />Writing&nbsp;to&nbsp;the&nbsp;file <BR />Enter&nbsp;your&nbsp;name:&nbsp;Zara <BR />Enter&nbsp;your&nbsp;age:&nbsp;<font color=Maroon>9</font> <BR />Reading&nbsp;from&nbsp;the&nbsp;file <BR />Zara <BR /><font color=Maroon>9</font> <BR /> <BR />Above&nbsp;examples&nbsp;make&nbsp;use&nbsp;of&nbsp;additional&nbsp;functions&nbsp;from&nbsp;<font color=Blue>cin</font>&nbsp;object,&nbsp;like&nbsp;getline()&nbsp; <BR />function&nbsp;to&nbsp;read&nbsp;the&nbsp;line&nbsp;from&nbsp;outside&nbsp;<font color=Blue>and</font>&nbsp;ignore()&nbsp;function&nbsp;to&nbsp;ignore&nbsp;the&nbsp;extra&nbsp; <BR />characters&nbsp;left&nbsp;by&nbsp;previous&nbsp;read&nbsp;statement. <BR />File&nbsp;Position&nbsp;Pointers: <BR /> <BR />Both&nbsp;istream&nbsp;<font color=Blue>and</font>&nbsp;ostream&nbsp;provide&nbsp;member&nbsp;functions&nbsp;<font color=Blue>for</font>&nbsp;repositioning&nbsp;the&nbsp;file-position&nbsp; <BR />pointer.&nbsp;These&nbsp;member&nbsp;functions&nbsp;are&nbsp;seekg&nbsp;(<font color=Maroon>"seek&nbsp;get"</font>)&nbsp;<font color=Blue>for</font>&nbsp;istream&nbsp;<font color=Blue>and</font>&nbsp;seekp&nbsp; <BR />(<font color=Maroon>"seek&nbsp;put"</font>)&nbsp;<font color=Blue>for</font>&nbsp;ostream. <BR /> <BR />The&nbsp;argument&nbsp;to&nbsp;seekg&nbsp;<font color=Blue>and</font>&nbsp;seekp&nbsp;normally&nbsp;is&nbsp;a&nbsp;<font color=Blue>long</font>&nbsp;integer.&nbsp;A&nbsp;second&nbsp;argument&nbsp;can&nbsp; <BR />be&nbsp;specified&nbsp;to&nbsp;indicate&nbsp;the&nbsp;seek&nbsp;direction.&nbsp;The&nbsp;seek&nbsp;direction&nbsp;can&nbsp;be&nbsp;ios::beg&nbsp; <BR />(the&nbsp;<font color=Blue>default</font>)&nbsp;<font color=Blue>for</font>&nbsp;positioning&nbsp;relative&nbsp;to&nbsp;the&nbsp;beginning&nbsp;of&nbsp;a&nbsp;stream,&nbsp;ios::cur&nbsp; <BR /><font color=Blue>for</font>&nbsp;positioning&nbsp;relative&nbsp;to&nbsp;the&nbsp;current&nbsp;position&nbsp;in&nbsp;a&nbsp;stream&nbsp;<font color=Blue>or</font>&nbsp;ios::end&nbsp;<font color=Blue>for</font>&nbsp; <BR />positioning&nbsp;relative&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;a&nbsp;stream. <BR /> <BR />The&nbsp;file-position&nbsp;pointer&nbsp;is&nbsp;an&nbsp;integer&nbsp;value&nbsp;that&nbsp;specifies&nbsp;the&nbsp;location&nbsp;in&nbsp;the&nbsp; <BR />file&nbsp;as&nbsp;a&nbsp;number&nbsp;of&nbsp;bytes&nbsp;from&nbsp;the&nbsp;files&nbsp;starting&nbsp;location.&nbsp;Some&nbsp;examples&nbsp;of <BR />positioning&nbsp;the&nbsp;<font color=Maroon>"get"</font>&nbsp;file-position&nbsp;pointer&nbsp;are: <BR /> <BR /><font color=Green>//&nbsp;position&nbsp;to&nbsp;the&nbsp;nth&nbsp;byte&nbsp;of&nbsp;fileObject&nbsp;(assumes&nbsp;ios::beg)</font> <BR />fileObject.seekg(&nbsp;n&nbsp;); <BR /> <BR /><font color=Green>//&nbsp;position&nbsp;n&nbsp;bytes&nbsp;forward&nbsp;in&nbsp;fileObject</font> <BR />fileObject.seekg(&nbsp;n,&nbsp;ios::cur&nbsp;); <BR /> <BR /><font color=Green>//&nbsp;position&nbsp;n&nbsp;bytes&nbsp;back&nbsp;from&nbsp;end&nbsp;of&nbsp;fileObject</font> <BR />fileObject.seekg(&nbsp;n,&nbsp;ios::end&nbsp;); <BR /> <BR /><font color=Green>//&nbsp;position&nbsp;at&nbsp;end&nbsp;of&nbsp;fileObject</font> <BR />fileObject.seekg(&nbsp;<font color=Maroon>0</font>,&nbsp;ios::end&nbsp;);</div>
           ]]>
        </string>
          <string name="oopTemplates" formatted="false">
       <![CDATA[  
          <div>Templates&nbsp;are&nbsp;the&nbsp;foundation&nbsp;of&nbsp;generic&nbsp;programming,&nbsp;which&nbsp;involves&nbsp;writing&nbsp;code&nbsp;in&nbsp;a&nbsp;way&nbsp; <BR />that&nbsp;is&nbsp;independent&nbsp;of&nbsp;any&nbsp;particular&nbsp;type. <BR /> <BR />A&nbsp;<font color=Blue>template</font>&nbsp;is&nbsp;a&nbsp;blueprint&nbsp;<font color=Blue>or</font>&nbsp;formula&nbsp;<font color=Blue>for</font>&nbsp;creating&nbsp;a&nbsp;generic&nbsp;<font color=Blue>class</font>&nbsp;<font color=Blue>or</font>&nbsp;a&nbsp;function.&nbsp; <BR />The&nbsp;library&nbsp;containers&nbsp;like&nbsp;iterators&nbsp;<font color=Blue>and</font>&nbsp;algorithms&nbsp;are&nbsp;examples&nbsp;of&nbsp;generic&nbsp; <BR />programming&nbsp;<font color=Blue>and</font>&nbsp;have&nbsp;been&nbsp;developed&nbsp;<font color=Blue>using</font>&nbsp;<font color=Blue>template</font>&nbsp;concept. <BR /> <BR />There&nbsp;is&nbsp;a&nbsp;single&nbsp;definition&nbsp;of&nbsp;each&nbsp;container,&nbsp;such&nbsp;as&nbsp;vector,&nbsp;but&nbsp;we&nbsp;can&nbsp;define&nbsp; <BR />many&nbsp;different&nbsp;kinds&nbsp;of&nbsp;vectors&nbsp;<font color=Blue>for</font>&nbsp;example,&nbsp;vector&nbsp;&lt;<font color=Blue>int</font>&gt;&nbsp;<font color=Blue>or</font>&nbsp;vector&nbsp;&lt;<font color=Blue>string</font>&gt;. <BR /> <BR />You&nbsp;can&nbsp;use&nbsp;templates&nbsp;to&nbsp;define&nbsp;functions&nbsp;as&nbsp;well&nbsp;as&nbsp;classes,&nbsp;let&nbsp;us&nbsp;see&nbsp;how&nbsp;<font color=Blue>do</font>&nbsp;they&nbsp;work: <BR />Function&nbsp;Template: <BR /> <BR />The&nbsp;general&nbsp;form&nbsp;of&nbsp;a&nbsp;<font color=Blue>template</font>&nbsp;function&nbsp;definition&nbsp;is&nbsp;shown&nbsp;here: <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>class</font>&nbsp;type&gt;&nbsp;ret-type&nbsp;func-name(parameter&nbsp;list) <BR />{ <BR />&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;body&nbsp;of&nbsp;function</font> <BR />}&nbsp; <BR /> <BR />Here,&nbsp;type&nbsp;is&nbsp;a&nbsp;placeholder&nbsp;name&nbsp;<font color=Blue>for</font>&nbsp;a&nbsp;data&nbsp;type&nbsp;used&nbsp;by&nbsp;the&nbsp;function.&nbsp;This&nbsp;name&nbsp;can&nbsp; <BR />be&nbsp;used&nbsp;within&nbsp;the&nbsp;function&nbsp;definition. <BR /> <BR />The&nbsp;following&nbsp;is&nbsp;the&nbsp;example&nbsp;of&nbsp;a&nbsp;function&nbsp;<font color=Blue>template</font>&nbsp;that&nbsp;returns&nbsp;the&nbsp;maximum&nbsp;of&nbsp;two&nbsp;values: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>string</font>&gt; <BR /> <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>typename</font>&nbsp;T&gt; <BR /><font color=Blue>inline</font>&nbsp;T&nbsp;<font color=Blue>const</font>&amp;&nbsp;Max&nbsp;(T&nbsp;<font color=Blue>const</font>&amp;&nbsp;a,&nbsp;T&nbsp;<font color=Blue>const</font>&amp;&nbsp;b)&nbsp; <BR />{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;a&nbsp;&lt;&nbsp;b&nbsp;?&nbsp;b:a;&nbsp; <BR />}&nbsp; <BR /><font color=Blue>int</font>&nbsp;main&nbsp;() <BR />{ <BR />&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;i&nbsp;=&nbsp;<font color=Maroon>39</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;j&nbsp;=&nbsp;<font color=Maroon>20</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Max(i,&nbsp;j):&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Max(i,&nbsp;j)&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>;&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;f1&nbsp;=&nbsp;<font color=Maroon>13</font><font color=Maroon>.5</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>double</font>&nbsp;f2&nbsp;=&nbsp;<font color=Maroon>20</font><font color=Maroon>.7</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Max(f1,&nbsp;f2):&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Max(f1,&nbsp;f2)&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>;&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>string</font>&nbsp;s1&nbsp;=&nbsp;<font color=Maroon>"Hello"</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>string</font>&nbsp;s2&nbsp;=&nbsp;<font color=Maroon>"World"</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Max(s1,&nbsp;s2):&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;Max(s1,&nbsp;s2)&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>;&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR />If&nbsp;we&nbsp;compile&nbsp;<font color=Blue>and</font>&nbsp;run&nbsp;above&nbsp;code,&nbsp;<font color=Blue>this</font>&nbsp;would&nbsp;produce&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR />Max(i,&nbsp;j):&nbsp;<font color=Maroon>39</font> <BR />Max(f1,&nbsp;f2):&nbsp;<font color=Maroon>20</font><font color=Maroon>.7</font> <BR />Max(s1,&nbsp;s2):&nbsp;World <BR /> <BR />Class&nbsp;Template: <BR /> <BR />Just&nbsp;as&nbsp;we&nbsp;can&nbsp;define&nbsp;function&nbsp;templates,&nbsp;we&nbsp;can&nbsp;also&nbsp;define&nbsp;<font color=Blue>class</font>&nbsp;templates.&nbsp; <BR />The&nbsp;general&nbsp;form&nbsp;of&nbsp;a&nbsp;generic&nbsp;<font color=Blue>class</font>&nbsp;declaration&nbsp;is&nbsp;shown&nbsp;here: <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>class</font>&nbsp;type&gt;&nbsp;<font color=Blue>class</font>&nbsp;<font color=Blue>class</font>-name&nbsp;{ <BR />. <BR />. <BR />. <BR />} <BR /> <BR />Here,&nbsp;type&nbsp;is&nbsp;the&nbsp;placeholder&nbsp;type&nbsp;name,&nbsp;which&nbsp;will&nbsp;be&nbsp;specified&nbsp;when&nbsp;a&nbsp;<font color=Blue>class</font>&nbsp; <BR />is&nbsp;instantiated.&nbsp;You&nbsp;can&nbsp;define&nbsp;more&nbsp;than&nbsp;one&nbsp;generic&nbsp;data&nbsp;type&nbsp;by&nbsp;<font color=Blue>using</font>&nbsp;a&nbsp;comma-separated&nbsp; <BR />list. <BR /> <BR />Following&nbsp;is&nbsp;the&nbsp;example&nbsp;to&nbsp;define&nbsp;<font color=Blue>class</font>&nbsp;Stack&lt;&gt;&nbsp;<font color=Blue>and</font>&nbsp;implement&nbsp;generic&nbsp;methods&nbsp;to&nbsp;push&nbsp; <BR /><font color=Blue>and</font>&nbsp;pop&nbsp;the&nbsp;elements&nbsp;from&nbsp;the&nbsp;stack: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;vector&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;cstdlib&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>string</font>&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;stdexcept&gt; <BR /> <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>; <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>class</font>&nbsp;T&gt; <BR /><font color=Blue>class</font>&nbsp;Stack&nbsp;{&nbsp; <BR />&nbsp;&nbsp;<font color=Blue>private</font>:&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;T&gt;&nbsp;elems;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;elements&nbsp;</font> <BR /> <BR />&nbsp;&nbsp;<font color=Blue>public</font>:&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;push(T&nbsp;<font color=Blue>const</font>&amp;);&nbsp;&nbsp;<font color=Green>//&nbsp;push&nbsp;element&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;pop();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;pop&nbsp;element&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;top()&nbsp;<font color=Blue>const</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;return&nbsp;top&nbsp;element&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>bool</font>&nbsp;empty()&nbsp;<font color=Blue>const</font>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;return&nbsp;true&nbsp;if&nbsp;empty.</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;elems.empty();&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp; <BR />};&nbsp; <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>class</font>&nbsp;T&gt; <BR /><font color=Blue>void</font>&nbsp;Stack&lt;T&gt;::push&nbsp;(T&nbsp;<font color=Blue>const</font>&amp;&nbsp;elem)&nbsp; <BR />{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;append&nbsp;copy&nbsp;of&nbsp;passed&nbsp;element&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;elems.push_back(elem);&nbsp;&nbsp;&nbsp;&nbsp; <BR />}&nbsp; <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>class</font>&nbsp;T&gt; <BR /><font color=Blue>void</font>&nbsp;Stack&lt;T&gt;::pop&nbsp;()&nbsp; <BR />{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(elems.empty())&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;out_of_range(<font color=Maroon>"Stack&lt;&gt;::pop():&nbsp;empty&nbsp;stack"</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;remove&nbsp;last&nbsp;element&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;elems.pop_back();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />}&nbsp; <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>class</font>&nbsp;T&gt; <BR />T&nbsp;Stack&lt;T&gt;::top&nbsp;()&nbsp;<font color=Blue>const</font>&nbsp; <BR />{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(elems.empty())&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;out_of_range(<font color=Maroon>"Stack&lt;&gt;::top():&nbsp;empty&nbsp;stack"</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;return&nbsp;copy&nbsp;of&nbsp;last&nbsp;element&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;elems.back();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />}&nbsp; <BR /> <BR /><font color=Blue>int</font>&nbsp;main()&nbsp; <BR />{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>try</font>&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stack&lt;<font color=Blue>int</font>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intStack;&nbsp;&nbsp;<font color=Green>//&nbsp;stack&nbsp;of&nbsp;ints&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stack&lt;<font color=Blue>string</font>&gt;&nbsp;stringStack;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;stack&nbsp;of&nbsp;strings&nbsp;</font> <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;manipulate&nbsp;int&nbsp;stack&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intStack.push(<font color=Maroon>7</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;intStack.top()&nbsp;&lt;&lt;<font color=Blue>endl</font>;&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;manipulate&nbsp;string&nbsp;stack&nbsp;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringStack.push(<font color=Maroon>"hello"</font>);&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;stringStack.top()&nbsp;&lt;&lt;&nbsp;<font color=Blue>std</font>::<font color=Blue>endl</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringStack.pop();&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringStack.pop();&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>catch</font>&nbsp;(exception&nbsp;<font color=Blue>const</font>&amp;&nbsp;ex)&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cerr&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Exception:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;ex.what()&nbsp;&lt;&lt;<font color=Blue>endl</font>;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;-<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp; <BR />}&nbsp; <BR /> <BR />If&nbsp;we&nbsp;compile&nbsp;<font color=Blue>and</font>&nbsp;run&nbsp;above&nbsp;code,&nbsp;<font color=Blue>this</font>&nbsp;would&nbsp;produce&nbsp;the&nbsp;following&nbsp;result: <BR /> <BR /><font color=Maroon>7</font> <BR />hello <BR />Exception:&nbsp;Stack&lt;&gt;::pop():&nbsp;empty&nbsp;stack</div>
         ]]>
        </string>
</resources>
