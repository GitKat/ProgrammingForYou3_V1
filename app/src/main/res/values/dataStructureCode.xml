<?xml version="1.0" encoding="utf-8"?>
<resources>
    
     <string name="DSStackWithOOPandExceptionHandlingConcept" formatted="false">
       <![CDATA[
       
       <div>Stack&nbsp;With&nbsp;OOP&nbsp;<font color=Blue>and</font>&nbsp;Exception&nbsp;Handling&nbsp;Concept <BR /> <BR />#ifndef&nbsp;STACK_H <BR /><font color=Blue>#define</font>&nbsp;STACK_H <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>class</font>&nbsp;A&gt; <BR /><font color=Blue>class</font>&nbsp;Stack <BR />{ <BR /><font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;makeNewStack(<font color=Blue>int</font>)&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;push(A)&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;A&nbsp;pop()&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>bool</font>&nbsp;isEmpty()&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>bool</font>&nbsp;isFull()&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;A&nbsp;topOfStack()&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;display()&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;~Stack(){} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;A&nbsp;traverse()&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>bool</font>&nbsp;endTrav()&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;resetTrav()&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />}&nbsp;; <BR /><font color=Blue>#endif</font> <BR /> <BR />#ifndef&nbsp;STATICSTACK_H <BR /><font color=Blue>#define</font>&nbsp;STATICSTACK_H <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;stdlib.h&gt; <BR />#<font color=Blue>include</font>&nbsp;<font color=Maroon>"Stack.h"</font> <BR />#<font color=Blue>include</font>&nbsp;<font color=Maroon>"StackExceptions.h"</font> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR />#<font color=Blue>include</font>&lt;<font color=Blue>string</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>&nbsp;; <BR /> <BR /><font color=Blue>template</font>&nbsp;&lt;<font color=Blue>class</font>&nbsp;T&gt; <BR /><font color=Blue>class</font>&nbsp;StaticStack&nbsp;:&nbsp;<font color=Blue>public</font>&nbsp;Stack&lt;T&gt; <BR />{ <BR /><font color=Blue>private</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;top&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;size&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;T*&nbsp;array&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;trav; <BR /> <BR /><font color=Blue>public</font>: <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;StaticStack() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;-<font color=Maroon>1</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;=&nbsp;<font color=Blue>NULL</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;trav&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;StaticStack(<font color=Blue>int</font>&nbsp;s) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;-<font color=Maroon>1</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;s&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;=&nbsp;<font color=Blue>new</font>&nbsp;T[size]&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;trav&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;makeNewStack(<font color=Blue>int</font>&nbsp;s) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;delete[]&nbsp;array&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;-<font color=Maroon>1</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;trav&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;s&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;=&nbsp;<font color=Blue>new</font>&nbsp;T[size]&nbsp;; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;push(T&nbsp;arg) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(isFull()) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;StackFull(<font color=Maroon>"The&nbsp;Stack&nbsp;is&nbsp;Full"</font>)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(top&nbsp;==&nbsp;-<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;top&nbsp;+&nbsp;<font color=Maroon>1</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;array[top]&nbsp;=&nbsp;arg; <BR />&nbsp;&nbsp;&nbsp;&nbsp;top++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;array[top]&nbsp;=&nbsp;arg&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;top++&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;T&nbsp;pop() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(isEmpty()) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;StackEmpty(<font color=Maroon>"The&nbsp;Stack&nbsp;is&nbsp;Empty"</font>)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;top--&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(top&nbsp;==&nbsp;-<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;StackEmpty(<font color=Maroon>"The&nbsp;Stack&nbsp;is&nbsp;Empty"</font>)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;array[top]&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;T&nbsp;traverse() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;trav&nbsp;==&nbsp;top&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;" <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;value&nbsp;of&nbsp;Traverse&nbsp;reach&nbsp;at&nbsp;it`s&nbsp;Peak"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;May&nbsp;you&nbsp;Want&nbsp;to&nbsp;Reset&nbsp;The&nbsp;Traverse&nbsp;(y/n)&nbsp;:&nbsp;"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;cin&gt;&gt;ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;if(ch==y) <BR />&nbsp;&nbsp;&nbsp;&nbsp;resetTrav();*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(endTrav()) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;CantTrav(<font color=Maroon>"Transverse&nbsp;Cant&nbsp;Proceed"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(&nbsp;trav&nbsp;&gt;&nbsp;top&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;trav&nbsp;=&nbsp;trav&nbsp;-&nbsp;<font color=Maroon>2</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(trav&nbsp;==&nbsp;-<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;CantTrav(<font color=Maroon>"Transverse&nbsp;Cant&nbsp;Proceed&nbsp;Because&nbsp;The&nbsp;Stack&nbsp;Is&nbsp;Empty"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;array[trav++]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font>&nbsp;<font color=Blue>if</font>(trav&nbsp;==&nbsp;top) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;trav&nbsp;=&nbsp;trav&nbsp;-&nbsp;<font color=Maroon>2</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(trav&nbsp;==&nbsp;-<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;CantTrav(<font color=Maroon>"Transverse&nbsp;Cant&nbsp;Proceed&nbsp;Because&nbsp;The&nbsp;Stack&nbsp;Is&nbsp;Empty"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;array[trav]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(trav&nbsp;==&nbsp;-<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;CantTrav(<font color=Maroon>"Transverse&nbsp;Cant&nbsp;Proceed&nbsp;Because&nbsp;The&nbsp;Stack&nbsp;Is&nbsp;Empty"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;array[trav++]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>bool</font>&nbsp;endTrav() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(top&nbsp;==&nbsp;-<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(trav&nbsp;==&nbsp;top&nbsp;+&nbsp;<font color=Maroon>1</font>)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(trav&nbsp;==&nbsp;top)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;resetTrav() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;trav&nbsp;=&nbsp;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>bool</font>&nbsp;isEmpty() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(top&nbsp;==&nbsp;-<font color=Maroon>1</font>)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>bool</font>&nbsp;isFull() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(top&nbsp;==&nbsp;size)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;T&nbsp;topOfStack() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(isEmpty()) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>throw</font>&nbsp;StackEmpty(<font color=Maroon>"The&nbsp;Stack&nbsp;is&nbsp;Empty"</font>)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(array[top&nbsp;-&nbsp;<font color=Maroon>1</font>])&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;<font color=Blue>void</font>&nbsp;display() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;i&nbsp;=&nbsp;-<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(i&nbsp;=&nbsp;i+<font color=Maroon>1</font>&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;top&nbsp;;&nbsp;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;array[i]&nbsp;&lt;&lt;&nbsp;<font color=Maroon>&nbsp;&nbsp;&nbsp;&nbsp;</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>virtual</font>&nbsp;~StaticStack() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;delete[]&nbsp;array&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;<font color=Maroon>0</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;=&nbsp;<font color=Blue>NULL</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}&nbsp;; <BR /> <BR /><font color=Blue>#endif</font> <BR /> <BR />#ifndef&nbsp;STACKEXCEPTIONS_H <BR /><font color=Blue>#define</font>&nbsp;STACKEXCEPTIONS_H <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;exception&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>&nbsp;; <BR /> <BR /><font color=Blue>class</font>&nbsp;StackEmpty&nbsp;:&nbsp;<font color=Blue>public</font>&nbsp;exception <BR />{ <BR /><font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;StackEmpty(<font color=Blue>char</font>*&nbsp;c)&nbsp;:&nbsp;exception(c) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{} <BR />}&nbsp;; <BR /> <BR /><font color=Blue>class</font>&nbsp;StackFull&nbsp;:&nbsp;<font color=Blue>public</font>&nbsp;exception <BR />{ <BR /><font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;StackFull(<font color=Blue>char</font>*&nbsp;c)&nbsp;:&nbsp;exception(c) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{} <BR />}&nbsp;; <BR /><font color=Blue>class</font>&nbsp;CantTrav&nbsp;:&nbsp;<font color=Blue>public</font>&nbsp;exception <BR />{ <BR /><font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;CantTrav(<font color=Blue>char</font>*&nbsp;c)&nbsp;:&nbsp;exception(c) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{} <BR />}; <BR /> <BR /><font color=Blue>#endif</font> <BR />#<font color=Blue>include</font>&nbsp;<font color=Maroon>"StaticStack.h"</font> <BR /><font color=Green>//#include&nbsp;"StackExceptions.h"</font> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>&gt; <BR /><font color=Blue>using</font>&nbsp;<font color=Blue>namespace</font>&nbsp;<font color=Blue>std</font>&nbsp;; <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;size; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;" <BR />&nbsp;Enter&nbsp;the&nbsp;Maximum&nbsp;Size&nbsp;of&nbsp;Stack&nbsp;:&nbsp;"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;size; <BR />&nbsp;&nbsp;&nbsp;&nbsp;Stack&lt;<font color=Blue>int</font>&gt;*&nbsp;S&nbsp;=&nbsp;<font color=Blue>new</font>&nbsp;StaticStack&lt;<font color=Blue>int</font>&gt;(size)&nbsp;; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;choice&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;data&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>bool</font>&nbsp;cont&nbsp;=&nbsp;true&nbsp;; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(cont) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>try</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Enter&nbsp;1&nbsp;push()"</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Enter&nbsp;2&nbsp;to&nbsp;pop()"</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Enter&nbsp;3&nbsp;to&nbsp;display()"</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Enter&nbsp;4&nbsp;to&nbsp;exit"</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Enter&nbsp;5&nbsp;to&nbsp;transverse"</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Enter&nbsp;6&nbsp;to&nbsp;reset&nbsp;the&nbsp;transverse"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;choice&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>switch</font>(choice) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>1</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;"Enter&nbsp;value&nbsp;to&nbsp;push&nbsp;in&nbsp;stack&nbsp; <BR />"&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;data&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;S-&gt;push(data)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>2</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data&nbsp;=&nbsp;S-&gt;pop()&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"The&nbsp;value&nbsp;returned&nbsp;is&nbsp;:&nbsp;"</font>&nbsp;&lt;&lt;&nbsp;data&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>&nbsp;; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>3</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S-&gt;display()&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>&nbsp;; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>4</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cont&nbsp;=&nbsp;false&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>5</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data&nbsp;=&nbsp;S-&gt;traverse(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;&nbsp;<font color=Maroon>"The&nbsp;value&nbsp;returned&nbsp;is&nbsp;:&nbsp;"</font>&lt;&lt;data&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>6</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S-&gt;resetTrav(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>default</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;<font color=Blue>endl</font>&lt;&lt;&nbsp;<font color=Maroon>"wrong&nbsp;value&nbsp;entered,&nbsp;try&nbsp;again"</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;}<font color=Green>//&nbsp;switch&nbsp;ends</font> <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>catch</font>(exception&nbsp;e) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;&lt;&lt;&nbsp;e.what()&nbsp;&lt;&lt;&nbsp;<font color=Blue>endl</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<font color=Green>//&nbsp;while&nbsp;loop&nbsp;ends</font> <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;S&nbsp;; <BR />} <BR /></div>
        ]]>
        </string>
        
     
     <string name="DSBinarytreeimplementation" formatted="false">
       <![CDATA[
       
    <div>Binary&nbsp;tree&nbsp;implementation <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>.h&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;conio.h&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;stdlib.h&gt; <BR /> <BR /> <BR /><font color=Blue>struct</font>&nbsp;node <BR />{ <BR />node&nbsp;*left; <BR /><font color=Blue>int</font>&nbsp;value; <BR />node&nbsp;*right; <BR />}; <BR />node&nbsp;*curr=<font color=Blue>NULL</font>; <BR /> <BR /> <BR /><font color=Blue>int</font>&nbsp;addnode(node&nbsp;*,&nbsp;node&nbsp;*); <BR /><font color=Blue>int</font>&nbsp;inorder(node&nbsp;*); <BR /><font color=Blue>int</font>&nbsp;preorder(node&nbsp;*); <BR /><font color=Blue>int</font>&nbsp;postorder(node&nbsp;*); <BR /> <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;c; <BR />&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;v; <BR />&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;<font color=Blue>do</font> <BR />&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Select&nbsp;any&nbsp;one"</font>; <BR />&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"0&nbsp;-&gt;Exit"</font>; <BR />&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"1&nbsp;-&gt;Add&nbsp;node"</font>; <BR />&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"2&nbsp;-&gt;Inorder&nbsp;traversal"</font>; <BR />&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"3&nbsp;-&gt;Preorder&nbsp;traversal"</font>; <BR />&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"4&nbsp;-&gt;Postorder&nbsp;trversal&nbsp;:&nbsp;"</font>; <BR /> <BR />&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;c; <BR /> <BR />&nbsp;&nbsp;<font color=Blue>switch</font>(c) <BR />&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>0</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(<font color=Maroon>1</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>1</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node&nbsp;*temp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;<font color=Blue>new</font>&nbsp;node; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;Enter&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;node&nbsp;:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;temp-&gt;value; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(curr==<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr=<font color=Blue>new</font>&nbsp;node; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr-&gt;value=temp-&gt;value; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr-&gt;left=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr-&gt;right=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;The&nbsp;root&nbsp;node&nbsp;is&nbsp;added"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v=addnode(curr,temp); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(v==<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;The&nbsp;node&nbsp;is&nbsp;added&nbsp;to&nbsp;the&nbsp;left"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font>&nbsp;<font color=Blue>if</font>(v==<font color=Maroon>2</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;The&nbsp;node&nbsp;is&nbsp;added&nbsp;to&nbsp;the&nbsp;right"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font>&nbsp;<font color=Blue>if</font>(v==<font color=Maroon>3</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;The&nbsp;same&nbsp;value&nbsp;exists"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>2</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v=inorder(curr); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(v==<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;The&nbsp;tree&nbsp;is&nbsp;empty"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>3</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v=preorder(curr); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(v==<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;The&nbsp;tree&nbsp;is&nbsp;empty"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>4</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v=postorder(curr); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(v==<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;The&nbsp;tree&nbsp;is&nbsp;empty"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>default</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;Invalid&nbsp;entry"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;}<font color=Blue>while</font>(c!=<font color=Maroon>0</font>); <BR />&nbsp;&nbsp;&nbsp;getch(); <BR />} <BR /> <BR /> <BR /><font color=Blue>int</font>&nbsp;addnode(node&nbsp;*fcurr,&nbsp;node&nbsp;*fnew&nbsp;) <BR />{ <BR />&nbsp;&nbsp;<font color=Blue>if</font>(fcurr-&gt;value==fnew-&gt;value) <BR />&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>3</font>; <BR />&nbsp;&nbsp;&nbsp;} <BR />&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fcurr-&gt;value&nbsp;&gt;&nbsp;fnew-&gt;value) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fcurr-&gt;left&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addnode(fcurr-&gt;left,&nbsp;fnew); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fcurr-&gt;left&nbsp;=&nbsp;fnew; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(fcurr-&gt;left)-&gt;left=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(fcurr-&gt;left)-&gt;right=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fcurr-&gt;right&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addnode(fcurr-&gt;right,&nbsp;fnew); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fcurr-&gt;right&nbsp;=&nbsp;fnew; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(fcurr-&gt;right)-&gt;left=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(fcurr-&gt;right)-&gt;right=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>2</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;} <BR />} <BR /> <BR /> <BR /><font color=Blue>int</font>&nbsp;inorder(node&nbsp;*fincurr) <BR />&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fincurr&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fincurr-&gt;left&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inorder(fincurr-&gt;left); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;fincurr-&gt;value&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fincurr-&gt;right&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inorder(fincurr-&gt;right); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;} <BR /> <BR /> <BR /><font color=Blue>int</font>&nbsp;preorder(node&nbsp;*fprcurr) <BR />&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fprcurr&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;fprcurr-&gt;value&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fprcurr-&gt;left&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preorder(fprcurr-&gt;left); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fprcurr-&gt;right&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preorder(fprcurr-&gt;right); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;} <BR /> <BR /><font color=Blue>int</font>&nbsp;postorder(node&nbsp;*fpocurr) <BR />&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fpocurr&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fpocurr-&gt;left&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;postorder(fpocurr-&gt;left); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(fpocurr-&gt;right&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;postorder(fpocurr-&gt;right); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;fpocurr-&gt;value&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;}</div>
    ]]>
        </string>
    
     <string name="DSQueueimplemetationUsingLinkedList" formatted="false">
       <![CDATA[
     <div>Queue&nbsp;implementation&nbsp;<font color=Blue>using</font>&nbsp;linked&nbsp;list <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>.h&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;conio.h&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;stdlib.h&gt; <BR /> <BR /><font color=Blue>struct</font>&nbsp;node <BR />&nbsp;{&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;name[<font color=Maroon>20</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;age; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;height; <BR />&nbsp;&nbsp;&nbsp;&nbsp;node&nbsp;*nxt; <BR />&nbsp;}; <BR />node&nbsp;*start_ptr=<font color=Blue>NULL</font>; <BR /> <BR /><font color=Blue>int</font>&nbsp;main() <BR />{ <BR /> <BR />&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;push&nbsp;(); <BR />&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;pop(); <BR />&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;ch; <BR />&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Queue"</font>; <BR />&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"-----"</font>; <BR /> <BR />&nbsp;&nbsp;<font color=Blue>do</font> <BR />&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Select&nbsp;an&nbsp;operation"</font>; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"u-&gt;push"</font>; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"o-&gt;pop"</font>; <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"e-&gt;exit"</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;ch; <BR /> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>switch</font>(ch) <BR />&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>u</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;push(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>o</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>e</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(<font color=Maroon>0</font>); <BR />&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;}<font color=Blue>while</font>(ch!=<font color=Maroon>e</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR /> <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;pop() <BR />{ <BR />&nbsp;node&nbsp;*temp1,*temp2; <BR />&nbsp;<font color=Blue>if</font>(start_ptr==<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"The&nbsp;list&nbsp;is&nbsp;empty"</font>; <BR />&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;temp1=start_ptr; <BR />&nbsp;&nbsp;&nbsp;temp2=temp1; <BR />&nbsp;&nbsp;<font color=Blue>while</font>(temp1-&gt;nxt!=<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;temp2=temp1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;temp1=temp1-&gt;nxt; <BR />&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;<font color=Blue>if</font>(temp1==temp2) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;temp1-&gt;name&lt;&lt;<font color=Maroon>","</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;temp1-&gt;age&lt;&lt;<font color=Maroon>",&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;temp1-&gt;height; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_ptr=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;temp1-&gt;name&lt;&lt;<font color=Maroon>",&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;temp1-&gt;age&lt;&lt;<font color=Maroon>",&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;temp1-&gt;height; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp2-&gt;nxt=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;temp1; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;} <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;push&nbsp;() <BR />&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;node&nbsp;*temp; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;<font color=Blue>new</font>&nbsp;node; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Please&nbsp;enter&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;person:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;temp-&gt;name; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Please&nbsp;enter&nbsp;the&nbsp;age&nbsp;of&nbsp;the&nbsp;person:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;temp-&gt;age; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&nbsp;&lt;&lt;&nbsp;<font color=Maroon>"Please&nbsp;enter&nbsp;the&nbsp;height&nbsp;of&nbsp;the&nbsp;person:&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&nbsp;&gt;&gt;&nbsp;temp-&gt;height; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(start_ptr&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp-&gt;nxt=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_ptr&nbsp;=&nbsp;temp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp-&gt;nxt=start_ptr; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_ptr=temp; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;}</div>
      ]]>
        </string>
        
     
     <string name="DSStackImplementaionAsAClass" formatted="false">
       <![CDATA[
     <div>Stack&nbsp;implementation&nbsp;as&nbsp;a&nbsp;<font color=Blue>class</font>. <BR /> <BR />#&nbsp;<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR />#&nbsp;<font color=Blue>include</font>&lt;process.h&gt; <BR />#&nbsp;<font color=Blue>include</font>&lt;conio.h&gt; <BR />#&nbsp;define&nbsp;SIZE&nbsp;<font color=Maroon>20</font> <BR /> <BR /><font color=Blue>class</font>&nbsp;stack <BR />{ <BR /><font color=Blue>int</font>&nbsp;a[SIZE]; <BR /><font color=Blue>int</font>&nbsp;tos;&nbsp;<font color=Green>//&nbsp;Top&nbsp;of&nbsp;Stack</font> <BR /><font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;stack(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;push(<font color=Blue>int</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;pop(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;isempty(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;isfull(); <BR />}; <BR />stack::stack() <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tos=<font color=Maroon>0</font>;&nbsp;<font color=Green>//Initialize&nbsp;Top&nbsp;of&nbsp;Stack</font> <BR />} <BR /> <BR /><font color=Blue>int</font>&nbsp;stack::isempty() <BR />{ <BR /><font color=Blue>return</font>&nbsp;(tos==<font color=Maroon>0</font>?<font color=Maroon>1</font>:<font color=Maroon>0</font>); <BR />} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;stack::isfull() <BR />{ <BR /><font color=Blue>return</font>&nbsp;(tos==SIZE?<font color=Maroon>1</font>:<font color=Maroon>0</font>); <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;stack::push(<font color=Blue>int</font>&nbsp;i) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(!isfull()) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[tos]=i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tos++; <BR />} <BR /><font color=Blue>else</font> <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cerr&lt;&lt;"Stack&nbsp;overflow&nbsp;error&nbsp;! <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Possible&nbsp;Data&nbsp;Loss&nbsp;!"; <BR />} <BR />} <BR /> <BR /><font color=Blue>int</font>&nbsp;stack::pop() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(!isempty()) <BR />{ <BR /><font color=Blue>return</font>(a[--tos]); <BR />} <BR /><font color=Blue>else</font> <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cerr&lt;&lt;<font color=Maroon>"Stack&nbsp;is&nbsp;empty!&nbsp;What&nbsp;to&nbsp;pop...!"</font>; <BR />} <BR /><font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack&nbsp;s; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;ch=<font color=Maroon>1</font>,num; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(ch!=<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;"Stack&nbsp;Operations&nbsp;Mani&nbsp;Menu <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Maroon>1</font>.Push <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Maroon>2</font>.Pop <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Maroon>3</font>.IsEmpty <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Maroon>4</font>.IsFull <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Maroon>0</font>.Exit <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>switch</font>(ch) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>0</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(<font color=Maroon>1</font>);&nbsp;<font color=Green>//Normal&nbsp;Termination&nbsp;of&nbsp;Program</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>1</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;the&nbsp;number&nbsp;to&nbsp;push"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;num; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.push(num); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>2</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Number&nbsp;popped&nbsp;from&nbsp;the&nbsp;stack&nbsp;is:&nbsp;"</font>&lt;&lt;s.pop()&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>3</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(s.isempty())?(<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Stack&nbsp;is&nbsp;empty."</font>):(<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Stack&nbsp;is&nbsp;not&nbsp;empty."</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>4</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(s.isfull())?(<font color=Blue>cout</font>&lt;&lt;"Stack&nbsp;is&nbsp;full. <BR /><font color=Maroon>"):(cout&lt;&lt;"</font>Stack&nbsp;is&nbsp;<font color=Blue>not</font>&nbsp;full. <BR />"); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>default</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Illegal&nbsp;Option.Please&nbsp;try&nbsp;again"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}<font color=Green>//end&nbsp;of&nbsp;while</font> <BR />getch(); <BR />}</div>
       ]]>
        </string>
        
     <string name="DSEmployeeManagementDataBase" formatted="false">
       <![CDATA[
     <div>Employee&nbsp;Management&nbsp;Database&nbsp;System <BR /> <BR />#<font color=Blue>include</font>&lt;fstream.h&gt; <BR />#<font color=Blue>include</font>&lt;dos.h&gt; <BR />#<font color=Blue>include</font>&lt;conio.h&gt; <BR />#<font color=Blue>include</font>&lt;stdlib.h&gt; <BR />#<font color=Blue>include</font>&lt;stdio.h&gt; <BR />#<font color=Blue>include</font>&lt;<font color=Blue>string</font>.h&gt; <BR />#<font color=Blue>include</font>&lt;<font color=Blue>iomanip</font>.h&gt; <BR />#<font color=Blue>include</font>&lt;graphics.h&gt; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>class</font>&nbsp;group <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>private</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;person <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;flag; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;empcode[<font color=Maroon>5</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;name[<font color=Maroon>40</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;age; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;sal; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;day; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;month; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;year; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}p; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fstream&nbsp;file; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;group(); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;addrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;listrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;modirec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;delrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;recallrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;packrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;exit(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;}; <BR /> <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;main() <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;choice,v; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group&nbsp;g; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>do</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;dosdate_t&nbsp;d; <BR />&nbsp;&nbsp;&nbsp;&nbsp;_dos_getdate(&amp;d); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.day=d.day;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.month=d.month;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.year=d.year;</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_dos_getdate(&amp;d);</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>5</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textcolor(<font color=Maroon>6</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cprintf(<font color=Maroon>"Todays&nbsp;date:"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"%d"</font>,d.day); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"/"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"%d"</font>,d.month); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"/"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;d.year; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>9</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Srknec.corporation&nbsp;pvt.ltd"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>12</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"1.Add&nbsp;record"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>15</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"2.List&nbsp;Record"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>17</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"3.Modify&nbsp;record"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>19</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"4.Delete&nbsp;record"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>21</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"5.Recall&nbsp;record"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>23</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"6.Pack&nbsp;record"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>25</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"0.Exit"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(<font color=Maroon>12</font>,<font color=Maroon>28</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Your&nbsp;choice"</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;choice; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>switch</font>(choice) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font>&nbsp;<font color=Maroon>1</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.addrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font><font color=Maroon>2</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.listrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font><font color=Maroon>3</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.modirec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font><font color=Maroon>4</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.delrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font><font color=Maroon>5</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.recallrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font><font color=Maroon>6</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.packrec(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>break</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>case</font><font color=Maroon>0</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.exit(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(<font color=Maroon>1</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(choice!=<font color=Maroon>0</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;group::group() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.open(<font color=Maroon>"Emp.dat"</font>,ios::binary|ios::in|ios::out); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.flag=<font color=Maroon>&nbsp;</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(!file) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Unable&nbsp;to&nbsp;open&nbsp;file"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;group::addrec() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.seekp(<font color=Maroon>0L</font>,ios::end); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;dosdate_t&nbsp;d; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_dos_getdate(&amp;d); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.day=d.day; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.month=d.month; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.year=d.year; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Make&nbsp;shure&nbsp;that&nbsp;no&nbsp;employee&nbsp;has&nbsp;the&nbsp;same&nbsp;code"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>do</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;"Enter&nbsp;employee&nbsp;&nbsp;code,&nbsp;name,&nbsp;age&nbsp;&amp;&nbsp;salary&nbsp; <BR />:"&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"OR"</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"To&nbsp;return&nbsp;to&nbsp;the&nbsp;Main&nbsp;menu&nbsp;pressm&nbsp;key&nbsp;else&nbsp;pressa:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(ch==<font color=Maroon>m</font>||ch==<font color=Maroon>M</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;p.empcode&gt;&gt;p.name&gt;&gt;p.age&gt;&gt;p.sal; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.flag=<font color=Maroon>&nbsp;</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.write((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p)); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Add&nbsp;another&nbsp;record&nbsp;?(y/n)&nbsp;:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(ch==<font color=Maroon>y</font>||ch==<font color=Maroon>Y</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;group::listrec() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;j=<font color=Maroon>0</font>,a; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.seekg(<font color=Maroon>0L</font>,ios::beg); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"List&nbsp;of&nbsp;records&nbsp;present&nbsp;are&nbsp;as&nbsp;under&gt;&gt;&gt;"</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"</font>&lt;&lt;<font color=Maroon>"|CODE|"</font>&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"</font>&lt;&lt;<font color=Maroon>"|NAME|"</font>&lt;&lt;" <BR /><font color=Maroon>"&lt;&lt;"</font>|AGE|<font color=Maroon>"&lt;&lt;"</font>&nbsp;<font color=Maroon>"&lt;&lt;"</font>|SALARY|<font color=Maroon>"&lt;&lt;"</font>&nbsp;<font color=Maroon>"&lt;&lt;"</font>|DATED|"&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//Donot&nbsp;touch&nbsp;Above&nbsp;Line&nbsp;Any&nbsp;Way&nbsp;it&nbsp;is&nbsp;set&nbsp;to&nbsp;give&nbsp;Some&nbsp;Nice&nbsp;Look</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(file.read((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p))) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(p.flag!=<font color=Maroon>*</font>) <BR /> <BR /><font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Record#"</font>&lt;&lt;" <BR /><font color=Maroon>"&lt;&lt;j++&lt;&lt;setw(6)&lt;&lt;p.empcode&lt;&lt;setw(20)&lt;&lt;p.name&lt;&lt;setw(4)&lt;&lt;p.age&lt;&lt;setw(9)&lt;&lt;p.sal&lt;&lt;"</font> <BR />&nbsp;<font color=Maroon>"&lt;&lt;p.day&lt;&lt;"</font>/<font color=Maroon>"&lt;&lt;p.month&lt;&lt;"</font>/"&lt;&lt;p.year&lt;&lt;<font color=Blue>endl</font>; <BR />} <BR />file.clear(); <BR /> <BR /><font color=Blue>if</font>(j==<font color=Maroon>0</font>) <BR />{ <BR />&nbsp;gotoxy(<font color=Maroon>10</font>,<font color=Maroon>10</font>); <BR />&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"No&nbsp;record&nbsp;exit"</font>; <BR />&nbsp;gotoxy(<font color=Maroon>10</font>,<font color=Maroon>11</font>); <BR />&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Press&nbsp;any&nbsp;key..."</font>; <BR />&nbsp;getch(); <BR />} <BR /><font color=Blue>else</font> <BR />{ <BR />&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Press&nbsp;any&nbsp;key..."</font>; <BR />&nbsp;getch(); <BR />} <BR />} <BR /><font color=Blue>void</font>&nbsp;group::modirec() <BR />{ <BR /><font color=Blue>char</font>&nbsp;code[<font color=Maroon>5</font>]; <BR /><font color=Blue>int</font>&nbsp;count=<font color=Maroon>0</font>; <BR /><font color=Blue>long</font>&nbsp;<font color=Blue>int</font>&nbsp;pos; <BR /><font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;employee&nbsp;code&nbsp;whose&nbsp;record&nbsp;is&nbsp;to&nbsp;be&nbsp;modified&nbsp;:"</font>; <BR /><font color=Blue>cin</font>&gt;&gt;code; <BR />file.seekg(<font color=Maroon>0L</font>,ios::beg); <BR /><font color=Blue>while</font>(file.read((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p))) <BR />{ <BR />&nbsp;<font color=Blue>if</font>(strcmp(p.empcode,code)==<font color=Maroon>0</font>) <BR />&nbsp;{ <BR />&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;new&nbsp;record&nbsp;"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;employee&nbsp;name,age&nbsp;&amp;&nbsp;salary&nbsp;:"</font>&lt;&lt;<font color=Blue>endl</font>; <BR />&nbsp;<font color=Blue>cin</font>&gt;&gt;p.name&gt;&gt;p.age&gt;&gt;p.sal; <BR />&nbsp;<font color=Blue>struct</font>&nbsp;dosdate_t&nbsp;d; <BR />&nbsp;_dos_getdate(&amp;d); <BR />&nbsp;p.day=d.day; <BR />&nbsp;p.month=d.month; <BR />&nbsp;p.year=d.year; <BR />&nbsp;p.flag=<font color=Maroon>&nbsp;</font>; <BR />&nbsp;pos=count*<font color=Blue>sizeof</font>(p); <BR />&nbsp;file.seekp(pos,ios::beg); <BR />&nbsp;file.write((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p)); <BR />&nbsp;<font color=Blue>return</font>; <BR />} <BR />&nbsp;count++; <BR />} <BR /><font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"No&nbsp;employee&nbsp;in&nbsp;file&nbsp;with&nbsp;code=&nbsp;"</font>&lt;&lt;code; <BR />getch(); <BR />file.clear(); <BR />} <BR /><font color=Blue>void</font>&nbsp;group::delrec() <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;code[<font color=Maroon>5</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>long</font>&nbsp;<font color=Blue>int</font>&nbsp;pos; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;count=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;employee&nbsp;code&nbsp;to&nbsp;be&nbsp;deleted&nbsp;:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;code; <BR />&nbsp;&nbsp;&nbsp;&nbsp;file.seekg(<font color=Maroon>0L</font>,ios::beg); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(file.read((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p))) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(strcmp(p.empcode,code)==<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.flag=<font color=Maroon>*</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos=count*<font color=Blue>sizeof</font>(p); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.seekp(pos,ios::beg); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.write((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p)); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"No&nbsp;employee&nbsp;in&nbsp;file&nbsp;with&nbsp;code="</font>&lt;&lt;code; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Press&nbsp;any&nbsp;key..."</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.clear(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;group::recallrec() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;code[<font color=Maroon>5</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>long</font>&nbsp;<font color=Blue>int</font>&nbsp;pos; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;count=<font color=Maroon>0</font>; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;employee&nbsp;code&nbsp;to&nbsp;be&nbsp;recalled&nbsp;:"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;code; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.seekg(<font color=Maroon>0L</font>,ios::beg); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(file.read((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p))) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(strcmp(p.empcode,code)==<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.flag=<font color=Maroon>&nbsp;</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos=count*<font color=Blue>sizeof</font>(p); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.seekp(pos,ios::beg); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.write((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p)); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"No&nbsp;employee&nbsp;in&nbsp;the&nbsp;file&nbsp;with&nbsp;code="</font>&lt;&lt;code; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Blue>endl</font>&lt;&lt;<font color=Maroon>"Press&nbsp;any&nbsp;key..."</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;file.clear(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;group::packrec() <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ofstream&nbsp;outfile; <BR />&nbsp;&nbsp;&nbsp;&nbsp;outfile.open(<font color=Maroon>"TEMP"</font>,ios::out); <BR />&nbsp;&nbsp;&nbsp;&nbsp;file.seekg(<font color=Maroon>0</font>,ios::beg); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(file.read((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p))) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(p.flag!=<font color=Maroon>*</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outfile.write((<font color=Blue>char</font>*)&amp;p,<font color=Blue>sizeof</font>(p)); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outfile.close(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.close(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(<font color=Maroon>"Emp.DAT"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rename(<font color=Maroon>"TEMP"</font>,<font color=Maroon>"EMP.DAT"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />file.open(<font color=Maroon>"EMP.DAT"</font>,ios::binary|ios::in|ios::out|ios::nocreate); <BR />&nbsp;gotoxy(<font color=Maroon>10</font>,<font color=Maroon>10</font>); <BR />&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Marked&nbsp;records&nbsp;to&nbsp;be&nbsp;deleted&nbsp;are&nbsp;all&nbsp;removed"</font>; <BR />&nbsp;gotoxy(<font color=Maroon>10</font>,<font color=Maroon>11</font>); <BR />&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"press&nbsp;any&nbsp;key...."</font>; <BR />&nbsp;getch(); <BR />&nbsp;} <BR />&nbsp;<font color=Blue>void</font>&nbsp;group::exit() <BR />&nbsp;{ <BR />&nbsp;file.close(); <BR />} <BR /></div>
     ]]>
        </string>
     
     <string name="DSImplemetationQueueAsAClass" formatted="false">
       <![CDATA[
     <div>Implementing&nbsp;Queue&nbsp;as&nbsp;a&nbsp;Class <BR /> <BR />#&nbsp;<font color=Blue>include</font>&lt;<font color=Blue>iostream</font>.h&gt; <BR />#&nbsp;<font color=Blue>include</font>&lt;conio.h&gt; <BR />#&nbsp;define&nbsp;SIZE&nbsp;<font color=Maroon>20</font> <BR /> <BR /><font color=Blue>class</font>&nbsp;queue <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;a[SIZE]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;front; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;rear; <BR /><font color=Blue>public</font>: <BR />&nbsp;&nbsp;&nbsp;&nbsp;queue(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;~queue(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;insert(<font color=Blue>int</font>&nbsp;i); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;remove(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;isempty(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;isfull(); <BR />}; <BR /> <BR />queue::queue() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;front=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;rear=<font color=Maroon>0</font>; <BR />} <BR />queue::~queue() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;[]a; <BR />} <BR /><font color=Blue>void</font>&nbsp;queue::insert(<font color=Blue>int</font>&nbsp;i) <BR />{ <BR /><font color=Blue>if</font>(isfull()) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;" <BR /> <BR />****** <BR />Queue&nbsp;is&nbsp;FULL&nbsp;!!! <BR />No&nbsp;insertion&nbsp;allowed&nbsp;further. <BR />****** <BR />"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>; <BR />} <BR />a[rear]&nbsp;=&nbsp;i; <BR />rear++; <BR />} <BR /> <BR /> <BR /><font color=Blue>int</font>&nbsp;queue::remove() <BR />{ <BR /><font color=Blue>if</font>(isempty()) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;" <BR /> <BR />****** <BR />Queue&nbsp;Empty&nbsp;!!! <BR />Value&nbsp;returned&nbsp;will&nbsp;be&nbsp;garbage. <BR />****** <BR />"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(-<font color=Maroon>9999</font>); <BR />} <BR /> <BR /><font color=Blue>return</font>(a[front++]); <BR />} <BR /> <BR /><font color=Blue>int</font>&nbsp;queue::isempty() <BR />{ <BR /><font color=Blue>if</font>(front&nbsp;==&nbsp;rear) <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>1</font>; <BR /><font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR /><font color=Blue>int</font>&nbsp;queue::isfull() <BR />{ <BR /><font color=Blue>if</font>(rear&nbsp;==&nbsp;SIZE) <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>1</font>; <BR /><font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />clrscr(); <BR />queue&nbsp;q; <BR />q.insert(<font color=Maroon>1</font>); <BR />q.insert(<font color=Maroon>2</font>); <BR /><font color=Blue>cout</font>&lt;&lt;<font color=Maroon>""</font>&lt;&lt;q.remove(); <BR /><font color=Blue>cout</font>&lt;&lt;<font color=Maroon>""</font>&lt;&lt;q.remove(); <BR /><font color=Blue>cout</font>&lt;&lt;<font color=Maroon>""</font>&lt;&lt;q.remove(); <BR />getch(); <BR />} <BR /></div>
     
      ]]>
        </string>
     
     <string name="DSGraphs" formatted="false">
       <![CDATA[
     <div>Graphs&nbsp;program <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>iostream</font>.h&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;conio.h&gt; <BR /> <BR /><font color=Blue>class</font>&nbsp;graph <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>private</font>:<font color=Blue>int</font>&nbsp;n; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;**a; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;*reach; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;*pos; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>public</font>:graph(<font color=Blue>int</font>&nbsp;k=<font color=Maroon>10</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;create(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;dfs(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>void</font>&nbsp;dfs(<font color=Blue>int</font>&nbsp;v,<font color=Blue>int</font>&nbsp;label); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;begin(<font color=Blue>int</font>&nbsp;v); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;nextvert(<font color=Blue>int</font>&nbsp;v); <BR />}; <BR /><font color=Blue>void</font>&nbsp;graph::graph(<font color=Blue>int</font>&nbsp;k) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;n=k; <BR />&nbsp;&nbsp;&nbsp;&nbsp;a=<font color=Blue>new</font>&nbsp;<font color=Blue>int</font>&nbsp;*[n+<font color=Maroon>1</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;reach=<font color=Blue>new</font>&nbsp;<font color=Blue>int</font>[n+<font color=Maroon>1</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;pos=<font color=Blue>new</font>&nbsp;<font color=Blue>int</font>&nbsp;[n+<font color=Maroon>1</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;i=<font color=Maroon>1</font>;i&lt;=n;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos[i]=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>1</font>;j&lt;=n;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[j]=<font color=Blue>new</font>&nbsp;<font color=Blue>int</font>[n+<font color=Maroon>1</font>]; <BR />} <BR /><font color=Blue>void</font>&nbsp;graph::create() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;i=<font color=Maroon>1</font>;i&lt;=n;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"Enter&nbsp;the&nbsp;"</font>&lt;&lt;i&lt;&lt;"th&nbsp;row&nbsp;of&nbsp;matrix&nbsp;a: <BR />"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>1</font>;j&lt;=n;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;a[i][j]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;k=<font color=Maroon>1</font>;k&lt;=n;k++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reach[k]=<font color=Maroon>0</font>; <BR />} <BR /><font color=Blue>void</font>&nbsp;graph::dfs() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;label=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;i=<font color=Maroon>1</font>;i&lt;=n;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(!reach[i]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dfs(i,label); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;" <BR />The&nbsp;contents&nbsp;of&nbsp;the&nbsp;reach&nbsp;array&nbsp;is: <BR />; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;j=<font color=Maroon>1</font>;j&lt;=n;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;reach[j]&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;&nbsp;"</font>; <BR />} <BR /><font color=Blue>void</font>&nbsp;graph::dfs(<font color=Blue>int</font>&nbsp;v,<font color=Blue>int</font>&nbsp;label) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;v&lt;&lt;<font color=Maroon>"&nbsp;&nbsp;&nbsp;&nbsp;"</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;reach[v]=label; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;u=begin(v); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(u) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(!reach[u]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dfs(u,label); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u=nextvert(v); <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />} <BR /><font color=Blue>int</font>&nbsp;graph::begin(<font color=Blue>int</font>&nbsp;v) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>((v&lt;<font color=Maroon>1</font>)&amp;&amp;(v&gt;n)) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;"Bad&nbsp;input <BR />"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;i=<font color=Maroon>1</font>;i&lt;=n;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(a[v][i]==<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos[v]=i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /><font color=Blue>int</font>&nbsp;graph::nextvert(<font color=Blue>int</font>&nbsp;v) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>((v&lt;<font color=Maroon>1</font>)&amp;&amp;(v&gt;n)) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;"Bad&nbsp;input <BR />"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(<font color=Blue>int</font>&nbsp;i=pos[v]+<font color=Maroon>1</font>;i&lt;=n;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(a[v][i]==<font color=Maroon>1</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos[v]=i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;i; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;<font color=Maroon>0</font>; <BR />} <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;x; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;"Enter&nbsp;the&nbsp;no&nbsp;of&nbsp;vertices: <BR />"; <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cin</font>&gt;&gt;x; <BR />&nbsp;&nbsp;&nbsp;&nbsp;graph&nbsp;g(x); <BR />&nbsp;&nbsp;&nbsp;&nbsp;g.create(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>cout</font>&lt;&lt;<font color=Maroon>"dfs&nbsp;is....."</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;g.dfs(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />} <BR /></div>
        ]]>
        </string>
     
     <string name="FilesandFoldersusingDataStructure" formatted="false">
       <![CDATA[
     <div>Files&nbsp;<font color=Blue>and</font>&nbsp;Folders&nbsp;<font color=Blue>using</font>&nbsp;Data&nbsp;structure <BR /> <BR />#<font color=Blue>include</font>&lt;stdio.h&gt; <BR />#<font color=Blue>include</font>&lt;<font color=Blue>string</font>.h&gt; <BR />#<font color=Blue>include</font>&lt;stdlib.h&gt; <BR />#<font color=Blue>include</font>&lt;conio.h&gt; <BR />#<font color=Blue>include</font>&lt;dir.h&gt; <BR />#<font color=Blue>include</font>&lt;dos.h&gt; <BR /> <BR /><font color=Blue>struct</font>&nbsp;node <BR />{ <BR />&nbsp;<font color=Blue>char</font>&nbsp;*name;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;used&nbsp;to&nbsp;get&nbsp;file&nbsp;/&nbsp;folder&nbsp;name.&nbsp;*/</font> <BR />&nbsp;<font color=Blue>int</font>&nbsp;attrib;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;used&nbsp;to&nbsp;get&nbsp;its&nbsp;attribute.&nbsp;&nbsp;*/</font> <BR />&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*next;&nbsp;&nbsp;<font color=Green>/*&nbsp;concept&nbsp;of&nbsp;Linked&nbsp;list&nbsp;*/</font> <BR />}; <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*head,*head1; <BR />&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*list,*list1; <BR />&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*&nbsp;place(<font color=Blue>struct</font>&nbsp;ffblk&nbsp;ff,<font color=Blue>struct</font>&nbsp;node&nbsp;*first,<font color=Blue>int</font>&nbsp;don); <BR /> <BR />&nbsp;<font color=Blue>void</font>&nbsp;display(<font color=Blue>struct</font>&nbsp;node&nbsp;*first); <BR />&nbsp;<font color=Blue>void</font>&nbsp;print(<font color=Blue>struct</font>&nbsp;node&nbsp;*list,<font color=Blue>int</font>&nbsp;*i); <BR /> <BR />&nbsp;<font color=Blue>int</font>&nbsp;i,c,c1,done,done1; <BR />&nbsp;<font color=Blue>struct</font>&nbsp;ffblk&nbsp;f,f1; <BR /> <BR />&nbsp;head=<font color=Blue>NULL</font>; <BR />&nbsp;head1=<font color=Blue>NULL</font>; <BR />&nbsp;clrscr(); <BR /> <BR />&nbsp;done=findfirst(<font color=Maroon>"*.*"</font>,&amp;f,FA_DIREC|FA_RDONLY|FA_HIDDEN|FA_SYSTEM|FA_ARCH); <BR />&nbsp;<font color=Green>/*&nbsp;struct&nbsp;variable&nbsp;"f"&nbsp;contains&nbsp;all&nbsp;files&nbsp;and&nbsp;folders&nbsp;information&nbsp;*/</font> <BR />&nbsp;done1=findfirst(<font color=Maroon>"*.*"</font>,&amp;f1,FA_RDONLY|FA_HIDDEN|FA_SYSTEM|FA_ARCH); <BR />&nbsp;<font color=Green>/*&nbsp;struct&nbsp;variable&nbsp;"f1"&nbsp;contains&nbsp;all&nbsp;files&nbsp;information&nbsp;*/</font> <BR />&nbsp;head=place(f,head,done);&nbsp;&nbsp;<font color=Green>/*&nbsp;content&nbsp;of&nbsp;f&nbsp;is&nbsp;placed&nbsp;in&nbsp;struct&nbsp;head&nbsp;*/</font> <BR />&nbsp;display(head); <BR /> <BR />&nbsp;<font color=Green>/* <BR />&nbsp;&nbsp;Note&nbsp;:&nbsp;f&nbsp;contains&nbsp;name&nbsp;of&nbsp;files&nbsp;and&nbsp;folders&nbsp;with&nbsp;their&nbsp;attributes <BR />&nbsp;&nbsp;in&nbsp;f.ff_name,&nbsp;f.ff_attrib&nbsp;which&nbsp;is&nbsp;assigned&nbsp;to&nbsp;name,&nbsp;attrib&nbsp;in <BR />&nbsp;&nbsp;the&nbsp;struct&nbsp;node <BR />&nbsp;*/</font> <BR />&nbsp;printf(<font color=Maroon>"*************************************************"</font>); <BR />&nbsp;getch(); <BR /> <BR /> <BR />&nbsp;head1=place(f1,head1,done1);&nbsp;<font color=Green>/*&nbsp;content&nbsp;of&nbsp;f1&nbsp;is&nbsp;placed&nbsp;in&nbsp;struct&nbsp;head1 <BR />*/</font> <BR />&nbsp;display(head1); <BR />&nbsp;<font color=Green>/* <BR />&nbsp;&nbsp;Note&nbsp;:&nbsp;f1&nbsp;contains&nbsp;name&nbsp;of&nbsp;files&nbsp;and&nbsp;folders&nbsp;with&nbsp;their&nbsp;attributes <BR />&nbsp;&nbsp;in&nbsp;f1.ff_name,&nbsp;f1.ff_attrib&nbsp;which&nbsp;is&nbsp;assigned&nbsp;to&nbsp;name,&nbsp;attrib&nbsp;in <BR />&nbsp;&nbsp;the&nbsp;struct&nbsp;node <BR />&nbsp;*/</font> <BR /> <BR />&nbsp;printf(<font color=Maroon>"*************************************************"</font>); <BR /> <BR />&nbsp;getch(); <BR /> <BR />&nbsp;i=<font color=Maroon>0</font>; <BR />&nbsp;c1=<font color=Maroon>0</font>; <BR />&nbsp;<font color=Green>/* <BR />&nbsp;&nbsp;Here,&nbsp;head&nbsp;and&nbsp;head1&nbsp;are&nbsp;compared&nbsp;so&nbsp;that&nbsp;we&nbsp;could&nbsp;extract&nbsp;only <BR />&nbsp;&nbsp;the&nbsp;folders. <BR />&nbsp;*/</font> <BR /> <BR /> <BR />&nbsp;list=head;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;head&nbsp;is&nbsp;assigned&nbsp;to&nbsp;list&nbsp;*/</font> <BR />&nbsp; <BR /><font color=Blue>while</font>(list!=<font color=Blue>NULL</font>) <BR />&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;list1=head1;&nbsp;&nbsp;<font color=Green>/*&nbsp;head1&nbsp;is&nbsp;assigned&nbsp;to&nbsp;list1&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(list1==<font color=Blue>NULL</font>)&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;if&nbsp;there&nbsp;are&nbsp;0&nbsp;files&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;print(list,&amp;i);&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;then&nbsp;display&nbsp;content&nbsp;of&nbsp;list&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(list1!=<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(strcmp(list-&gt;name,list1-&gt;name)==<font color=Maroon>0</font>)&nbsp;&nbsp;<font color=Green>/*&nbsp;compare&nbsp;list&nbsp;and&nbsp;list1&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c1=<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;list1=list1-&gt;next; <BR />&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(c1==<font color=Maroon>0</font>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;if&nbsp;folder&nbsp;found&nbsp;both&nbsp;in&nbsp;list&nbsp;and&nbsp;list1*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(list,&amp;i);&nbsp;&nbsp;<font color=Green>/*&nbsp;then&nbsp;display&nbsp;content&nbsp;of&nbsp;list&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;c1=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;list=list-&gt;next; <BR />&nbsp;&nbsp;} <BR /> <BR /> <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FOLDERS&nbsp;=&nbsp;%d",i); <BR />&nbsp;printf(<font color=Maroon>"*************************************************"</font>); <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Where,"); <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;H&nbsp;-&nbsp;Hidden"); <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D&nbsp;-&nbsp;Directory"); <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R&nbsp;-&nbsp;Read&nbsp;only"); <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;-&nbsp;System"); <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;-&nbsp;Archive"); <BR /> <BR />&nbsp;getch(); <BR /> <BR />&nbsp;free(list1); <BR />&nbsp;free(list); <BR />&nbsp;free(head); <BR />&nbsp;free(head1); <BR /> <BR />} <BR /> <BR /> <BR /> <BR /><font color=Blue>void</font>&nbsp;print(<font color=Blue>struct</font>&nbsp;node&nbsp;*list,<font color=Blue>int</font>&nbsp;*i) <BR />{ <BR />&nbsp;<font color=Blue>void</font>&nbsp;property(<font color=Blue>struct</font>&nbsp;node&nbsp;*list); <BR />&nbsp;<font color=Green>/*&nbsp;to&nbsp;display&nbsp;folders&nbsp;other&nbsp;than&nbsp;default&nbsp;folders&nbsp;(.&nbsp;and&nbsp;..)&nbsp;&nbsp;*/</font> <BR />&nbsp;<font color=Blue>if</font>((strcmp(list-&gt;name,<font color=Maroon>"."</font>))!=<font color=Maroon>0</font>&nbsp;&amp;&amp;&nbsp;(strcmp(list-&gt;name,<font color=Maroon>".."</font>))!=<font color=Maroon>0</font>) <BR />&nbsp;{ <BR />&nbsp;&nbsp;*i=*i+<font color=Maroon>1</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;counts&nbsp;number&nbsp;of&nbsp;folders&nbsp;*/</font> <BR />&nbsp;&nbsp;property(list); <BR />&nbsp;&nbsp;printf("&nbsp;%s <BR />",list-&gt;name); <BR />&nbsp;} <BR />} <BR /> <BR /> <BR /> <BR /> <BR /><font color=Blue>void</font>&nbsp;property(<font color=Blue>struct</font>&nbsp;node&nbsp;*list) <BR />{&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;finds&nbsp;their&nbsp;attribute&nbsp;*/</font> <BR />&nbsp;&nbsp;<font color=Blue>if</font>(list-&gt;attrib&nbsp;&amp;&nbsp;FA_HIDDEN) <BR />&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"(H)"</font>); <BR /> <BR />&nbsp;&nbsp;<font color=Blue>if</font>(list-&gt;attrib&nbsp;&amp;&nbsp;FA_DIREC) <BR />&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"(D)"</font>); <BR /> <BR />&nbsp;&nbsp;<font color=Blue>if</font>(list-&gt;attrib&nbsp;&amp;&nbsp;FA_RDONLY) <BR />&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"(R)"</font>); <BR /> <BR />&nbsp;&nbsp;<font color=Blue>if</font>(list-&gt;attrib&nbsp;&amp;&nbsp;FA_SYSTEM) <BR />&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"(S)"</font>); <BR /> <BR />&nbsp;&nbsp;<font color=Blue>if</font>(list-&gt;attrib&nbsp;&amp;&nbsp;FA_ARCH) <BR />&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"(A)"</font>); <BR />} <BR /> <BR /><font color=Blue>struct</font>&nbsp;node&nbsp;*&nbsp;place(<font color=Blue>struct</font>&nbsp;ffblk&nbsp;ff,<font color=Blue>struct</font>&nbsp;node&nbsp;*first,<font color=Blue>int</font>&nbsp;don) <BR />{ <BR />&nbsp;<font color=Blue>static</font>&nbsp;<font color=Blue>int</font>&nbsp;j; <BR /> <BR />&nbsp;<font color=Blue>void</font>&nbsp;create(<font color=Blue>struct</font>&nbsp;node&nbsp;*first,<font color=Blue>char</font>&nbsp;*ch,<font color=Blue>int</font>&nbsp;d); <BR />&nbsp;<font color=Blue>void</font>&nbsp;insert(<font color=Blue>struct</font>&nbsp;node&nbsp;*first,<font color=Blue>char</font>&nbsp;*ch,<font color=Blue>int</font>&nbsp;d); <BR /> <BR />&nbsp;<font color=Blue>int</font>&nbsp;i=<font color=Maroon>0</font>,c=<font color=Maroon>0</font>; <BR />&nbsp;<font color=Blue>char</font>&nbsp;*p; <BR /> <BR />&nbsp;<font color=Blue>if</font>(don!=<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;first=<font color=Blue>NULL</font>; <BR />&nbsp;<font color=Blue>else</font> <BR />&nbsp;{ <BR />&nbsp;<font color=Blue>while</font>(don==<font color=Maroon>0</font>) <BR />&nbsp;{ <BR />&nbsp;&nbsp;<font color=Blue>if</font>(i==<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;first=(<font color=Blue>struct</font>&nbsp;node&nbsp;*)malloc(<font color=Blue>sizeof</font>(<font color=Blue>struct</font>&nbsp;node)); <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;((p&nbsp;=&nbsp;(<font color=Blue>char</font>&nbsp;*)&nbsp;malloc(<font color=Maroon>14</font>))&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;exit(<font color=Maroon>1</font>); <BR />&nbsp;&nbsp;&nbsp;strcpy(p,ff.ff_name); <BR />&nbsp;&nbsp;&nbsp;create(first,p,ff.ff_attrib); <BR />&nbsp;&nbsp;&nbsp;i=<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;((p&nbsp;=&nbsp;(<font color=Blue>char</font>&nbsp;*)&nbsp;malloc(<font color=Maroon>14</font>))&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;exit(<font color=Maroon>1</font>); <BR />&nbsp;&nbsp;&nbsp;strcpy(p,ff.ff_name); <BR />&nbsp;&nbsp;&nbsp;insert(first,p,ff.ff_attrib); <BR />&nbsp;&nbsp;} <BR />&nbsp;&nbsp;don=findnext(&amp;ff); <BR />&nbsp;&nbsp;c=c+<font color=Maroon>1</font>; <BR />&nbsp;} <BR /> <BR />&nbsp;} <BR /> <BR />&nbsp;<font color=Blue>if</font>(j==<font color=Maroon>0</font>) <BR />&nbsp;{ <BR />&nbsp;printf(<font color=Maroon>"*************************************************"</font>); <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%d&nbsp;FILES&nbsp;&amp;&nbsp;FOLDERS",c); <BR />&nbsp;j+=<font color=Maroon>1</font>; <BR />&nbsp;} <BR />&nbsp;<font color=Blue>else</font> <BR />&nbsp;printf(" <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%d&nbsp;FILES",c); <BR />&nbsp;<font color=Blue>return</font>(first); <BR />} <BR /> <BR /> <BR /><font color=Blue>void</font>&nbsp;create(<font color=Blue>struct</font>&nbsp;node&nbsp;*first,<font color=Blue>char</font>&nbsp;*ch,<font color=Blue>int</font>&nbsp;d) <BR />{ <BR />&nbsp;<font color=Blue>char</font>&nbsp;*p; <BR />&nbsp;<font color=Blue>if</font>&nbsp;((p&nbsp;=&nbsp;(<font color=Blue>char</font>&nbsp;*)&nbsp;malloc(<font color=Blue>sizeof</font>(ch)))&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;exit(<font color=Maroon>1</font>); <BR /> <BR />&nbsp;p=ch; <BR /> <BR />&nbsp;first-&gt;name=p; <BR />&nbsp;first-&gt;attrib=d; <BR />&nbsp;first-&gt;next=<font color=Blue>NULL</font>; <BR /> <BR />&nbsp;<font color=Blue>return</font>; <BR />} <BR /> <BR /> <BR /><font color=Blue>void</font>&nbsp;insert(<font color=Blue>struct</font>&nbsp;node&nbsp;*first,<font color=Blue>char</font>&nbsp;*ch,<font color=Blue>int</font>&nbsp;d) <BR />{ <BR />&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*temp,*list; <BR /> <BR />&nbsp;<font color=Blue>char</font>&nbsp;*p; <BR /> <BR />&nbsp;list=first; <BR /> <BR />&nbsp;<font color=Blue>while</font>(list-&gt;next!=<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;list=list-&gt;next; <BR />&nbsp;<font color=Blue>if</font>&nbsp;((p&nbsp;=&nbsp;(<font color=Blue>char</font>&nbsp;*)malloc(<font color=Blue>sizeof</font>(ch)))&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;exit(<font color=Maroon>1</font>); <BR /> <BR />&nbsp;p=ch; <BR /> <BR />&nbsp;temp=(<font color=Blue>struct</font>&nbsp;node&nbsp;*)malloc(<font color=Blue>sizeof</font>(<font color=Blue>struct</font>&nbsp;node)); <BR />&nbsp;temp-&gt;name=p; <BR />&nbsp;temp-&gt;attrib=d; <BR />&nbsp;temp-&gt;next=<font color=Blue>NULL</font>; <BR /> <BR />&nbsp;list-&gt;next=temp; <BR />&nbsp;<font color=Blue>return</font>; <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;display(<font color=Blue>struct</font>&nbsp;node&nbsp;*first) <BR />{ <BR />&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*list; <BR />&nbsp;<font color=Blue>void</font>&nbsp;property(<font color=Blue>struct</font>&nbsp;node&nbsp;*list); <BR /> <BR />&nbsp;list=first; <BR /> <BR />&nbsp;<font color=Blue>if</font>(list==<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;printf(<font color=Maroon>"NULL"</font>); <BR />&nbsp;<font color=Blue>else</font> <BR />&nbsp;{ <BR />&nbsp;<font color=Blue>while</font>(list-&gt;next!=<font color=Blue>NULL</font>) <BR />&nbsp;{ <BR />&nbsp;&nbsp;property(list); <BR />&nbsp;&nbsp;printf(<font color=Maroon>"%s&nbsp;%d"</font>,list-&gt;name,list-&gt;attrib); <BR />&nbsp;&nbsp;list=list-&gt;next; <BR />&nbsp;} <BR />&nbsp;&nbsp;property(list); <BR />&nbsp;&nbsp;printf(<font color=Maroon>"%s&nbsp;%d"</font>,list-&gt;name,list-&gt;attrib); <BR />&nbsp;} <BR />&nbsp;<font color=Blue>return</font>; <BR />} <BR /></div>
      ]]>
        </string>
     
     <string name="DSlinkedList1" formatted="false">
       <![CDATA[
     <div>Linked&nbsp;List&nbsp;Problems <BR />Question: <BR />Consider&nbsp;a&nbsp;linked&nbsp;list&nbsp;to&nbsp;store&nbsp;a&nbsp;polynomial,&nbsp;that&nbsp;is,&nbsp;every&nbsp;node&nbsp;of&nbsp;the&nbsp;linked&nbsp;list <BR />has&nbsp;coefficient,&nbsp;exponent&nbsp;<font color=Blue>and</font>&nbsp;pointer&nbsp;to&nbsp;the&nbsp;next&nbsp;node&nbsp;in&nbsp;the&nbsp;list. <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />(i)&nbsp;Define&nbsp;a&nbsp;structure&nbsp;<font color=Blue>for</font>&nbsp;node&nbsp;of&nbsp;such&nbsp;a&nbsp;list. <BR />(ii)Write&nbsp;a&nbsp;function&nbsp;to&nbsp;subtract&nbsp;two&nbsp;such&nbsp;polynomials.&nbsp;The&nbsp;function&nbsp;should&nbsp;accept <BR />pointers&nbsp;to&nbsp;the&nbsp;two&nbsp;polynomials&nbsp;as&nbsp;arguments&nbsp;<font color=Blue>and</font>&nbsp;<font color=Blue>return</font>&nbsp;the&nbsp;pointer&nbsp;to&nbsp;the&nbsp;resultant&nbsp; <BR />polynomial.&nbsp;Assume&nbsp;that&nbsp;the&nbsp;polynomials&nbsp;passed&nbsp;to&nbsp;the&nbsp;function&nbsp;are&nbsp;in&nbsp;decreasing&nbsp;order&nbsp; <BR />on&nbsp;the&nbsp;exponents.&nbsp; <BR />Answer: <BR />(i)&nbsp;Structure&nbsp;<font color=Blue>for</font>&nbsp;polynomial&nbsp;node <BR /> <BR /><font color=Blue>struct</font>&nbsp;polynode <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;coeff&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;exp&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;polynode&nbsp;*link&nbsp;; <BR />}; <BR /> <BR />(ii)&nbsp;A&nbsp;function&nbsp;that&nbsp;subtract&nbsp;two&nbsp;polynomials: <BR />&nbsp; <BR /><font color=Blue>struct</font>&nbsp;polynode&nbsp;*&nbsp;poly_sub&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;polynode&nbsp;*x,&nbsp;<font color=Blue>struct</font>&nbsp;polynode*y&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;polynode&nbsp;*z,*temp,*s=<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;if&nbsp;both&nbsp;linked&nbsp;lists&nbsp;are&nbsp;empty&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(&nbsp;x&nbsp;==&nbsp;<font color=Blue>NULL</font>&nbsp;&amp;&amp;&nbsp;y&nbsp;==&nbsp;<font color=Blue>NULL</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;traverse&nbsp;till&nbsp;one&nbsp;of&nbsp;the&nbsp;list&nbsp;ends&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>&nbsp;(&nbsp;x&nbsp;!=&nbsp;<font color=Blue>NULL</font>&nbsp;||&nbsp;y&nbsp;!=&nbsp;<font color=Blue>NULL</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;create&nbsp;a&nbsp;new&nbsp;node&nbsp;if&nbsp;the&nbsp;list&nbsp;is&nbsp;empty&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(&nbsp;s&nbsp;==&nbsp;<font color=Blue>NULL</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;malloc&nbsp;(&nbsp;<font color=Blue>sizeof</font>&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;polynode&nbsp;)&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;=&nbsp;s&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;create&nbsp;new&nbsp;nodes&nbsp;at&nbsp;intermediate&nbsp;stages&nbsp;*/</font>&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;malloc&nbsp;(&nbsp;<font color=Blue>sizeof</font>&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;polynode&nbsp;)&nbsp;); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;=&nbsp;z&nbsp;-&gt;&nbsp;link&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(y==<font color=Blue>NULL</font>&nbsp;&amp;&amp;&nbsp;x!=<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;coeff&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;coeff; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;exp&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;exp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x=x&nbsp;-&gt;&nbsp;link; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>continue</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(x==<font color=Blue>NULL</font>&nbsp;&amp;&amp;&nbsp;y!=<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;coeff&nbsp;=&nbsp;y&nbsp;-&gt;&nbsp;coeff; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;exp&nbsp;=&nbsp;y&nbsp;-&gt;&nbsp;exp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;=&nbsp;y&nbsp;-&gt;&nbsp;link; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>continue</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;store&nbsp;a&nbsp;term&nbsp;of&nbsp;the&nbsp;larger&nbsp;degree&nbsp;polynomial&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(&nbsp;x&nbsp;-&gt;&nbsp;exp&nbsp;&lt;&nbsp;y&nbsp;-&gt;&nbsp;exp&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;coeff&nbsp;=&nbsp;y&nbsp;-&gt;&nbsp;coeff&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;exp&nbsp;=&nbsp;y&nbsp;-&gt;&nbsp;exp&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;=&nbsp;y&nbsp;-&gt;&nbsp;link&nbsp;;&nbsp;<font color=Green>/*&nbsp;go&nbsp;to&nbsp;the&nbsp;next&nbsp;node&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(&nbsp;x&nbsp;-&gt;&nbsp;exp&nbsp;&gt;&nbsp;y&nbsp;-&gt;&nbsp;exp&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;coeff&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;coeff&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;exp&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;exp&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;link&nbsp;;&nbsp;<font color=Green>/*&nbsp;go&nbsp;to&nbsp;the&nbsp;next&nbsp;node&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;add&nbsp;the&nbsp;coefficients,&nbsp;when&nbsp;exponents&nbsp;are&nbsp;equal*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(&nbsp;x&nbsp;-&gt;&nbsp;exp&nbsp;==&nbsp;y&nbsp;-&gt;&nbsp;exp&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;assigning&nbsp;the&nbsp;added&nbsp;coefficient&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;coeff&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;coeff&nbsp;-&nbsp;y&nbsp;-&gt;&nbsp;coeff&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;exp&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;exp&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;go&nbsp;to&nbsp;the&nbsp;next&nbsp;node&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;link&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;=&nbsp;y&nbsp;-&gt;&nbsp;link&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp; <BR />} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;(s); <BR />}&nbsp; <BR /> <BR />Question: <BR />Write&nbsp;a&nbsp;function&nbsp;to&nbsp;reverse&nbsp;the&nbsp;links&nbsp;in&nbsp;a&nbsp;linked&nbsp;list&nbsp;such&nbsp;that&nbsp;the&nbsp;last&nbsp;node&nbsp;becomes <BR />the&nbsp;first&nbsp;<font color=Blue>and</font>&nbsp;the&nbsp;first&nbsp;becomes&nbsp;the&nbsp;last&nbsp;by&nbsp;traversing&nbsp;the&nbsp;linked&nbsp;list&nbsp;only&nbsp;once. <BR /> <BR />Answer: <BR />A&nbsp;C&nbsp;function&nbsp;to&nbsp;reverse&nbsp;the&nbsp;linked&nbsp;list: <BR /> <BR /><font color=Blue>struct</font>&nbsp;node <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;data&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*link&nbsp;; <BR />}; <BR /> <BR /><font color=Blue>void</font>&nbsp;reverse&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;**x&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*q,&nbsp;*r,&nbsp;*s&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;*x&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;<font color=Blue>NULL</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;traverse&nbsp;the&nbsp;entire&nbsp;linked&nbsp;list&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>&nbsp;(&nbsp;q&nbsp;!=&nbsp;<font color=Blue>NULL</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;r&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;q&nbsp;;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;q&nbsp;-&gt;&nbsp;link&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;s&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*x&nbsp;=&nbsp;r&nbsp;; <BR />}&nbsp; <BR /> <BR />Question: <BR />Write&nbsp;a&nbsp;C&nbsp;function&nbsp;to&nbsp;delete&nbsp;a&nbsp;given&nbsp;item&nbsp;from&nbsp;a&nbsp;single&nbsp;linked&nbsp;list.&nbsp;Check&nbsp;<font color=Blue>for</font>&nbsp;duplicate&nbsp;elements. <BR /> <BR />Answer: <BR /><font color=Blue>struct</font>&nbsp;node <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;data&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*&nbsp;link&nbsp;; <BR />}; <BR /> <BR /><font color=Blue>void</font>&nbsp;delete&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;**q,&nbsp;<font color=Blue>int</font>&nbsp;num&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*old,&nbsp;*temp&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;*q&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>&nbsp;(&nbsp;temp&nbsp;!=&nbsp;<font color=Blue>NULL</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(&nbsp;temp&nbsp;-&gt;&nbsp;data&nbsp;==&nbsp;num&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;if&nbsp;node&nbsp;to&nbsp;be&nbsp;deleted&nbsp;is&nbsp;the&nbsp;first&nbsp;node&nbsp;in&nbsp;the&nbsp;linked&nbsp;list&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(&nbsp;temp&nbsp;==&nbsp;*q&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*q&nbsp;=&nbsp;temp&nbsp;-&gt;&nbsp;link&nbsp;;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;deletes&nbsp;the&nbsp;intermediate&nbsp;nodes&nbsp;in&nbsp;the&nbsp;linked&nbsp;list&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;old&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;temp&nbsp;-&gt;&nbsp;link&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;free&nbsp;the&nbsp;memory&nbsp;occupied&nbsp;by&nbsp;the&nbsp;node&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free&nbsp;(&nbsp;temp&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;traverse&nbsp;the&nbsp;linked&nbsp;list&nbsp;till&nbsp;the&nbsp;last&nbsp;node&nbsp;is&nbsp;reached&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;old&nbsp;=&nbsp;temp&nbsp;;&nbsp;<font color=Green>/*&nbsp;old&nbsp;points&nbsp;to&nbsp;the&nbsp;previous&nbsp;node*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;temp&nbsp;-&gt;&nbsp;link&nbsp;;&nbsp;<font color=Green>/*&nbsp;go&nbsp;to&nbsp;the&nbsp;next&nbsp;node&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />} <BR /> <BR /> <BR />printf&nbsp;(&nbsp;<font color=Maroon>"\nElement&nbsp;%d&nbsp;not&nbsp;found"</font>,&nbsp;num&nbsp;)&nbsp;; <BR />}&nbsp;</div>
         ]]>
        </string>

        <string name="DSlinkedList2" formatted="false">
       <![CDATA[  
     <div>Question: <BR />Write&nbsp;a&nbsp;complete&nbsp;program&nbsp;to&nbsp;create&nbsp;a&nbsp;singly&nbsp;linked&nbsp;list.&nbsp;Write&nbsp;functions&nbsp;to&nbsp;<font color=Blue>do</font>&nbsp;the <BR />following&nbsp;operations: <BR /> <BR />(i)&nbsp;&nbsp;&nbsp;Count&nbsp;the&nbsp;number&nbsp;of&nbsp;nodes <BR />(ii)&nbsp;&nbsp;Add&nbsp;a&nbsp;<font color=Blue>new</font>&nbsp;node&nbsp;at&nbsp;the&nbsp;end <BR />(iii)&nbsp;Reverse&nbsp;the&nbsp;list. <BR /> <BR />Answer: <BR />A&nbsp;complete&nbsp;program&nbsp;to&nbsp;create&nbsp;a&nbsp;linked&nbsp;list,&nbsp;counting&nbsp;number&nbsp;of&nbsp;nodes,&nbsp;adding&nbsp;<font color=Blue>new</font> <BR />node&nbsp;at&nbsp;the&nbsp;end&nbsp;<font color=Blue>and</font>&nbsp;reversing&nbsp;the&nbsp;list&nbsp;is&nbsp;as&nbsp;follows: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;stdio.h&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;conio.h&gt; <BR />#<font color=Blue>include</font>&nbsp;&lt;alloc.h&gt; <BR /><font color=Green>/*&nbsp;structure&nbsp;containing&nbsp;a&nbsp;data&nbsp;part&nbsp;and&nbsp;link&nbsp;part&nbsp;*/</font> <BR /> <BR /><font color=Blue>struct</font>&nbsp;node <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;data&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*link&nbsp;; <BR />}; <BR /> <BR /><font color=Blue>void</font>&nbsp;append&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;**,&nbsp;<font color=Blue>int</font>&nbsp;)&nbsp;; <BR /> <BR /><font color=Blue>void</font>&nbsp;reverse&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;**&nbsp;)&nbsp;; <BR /> <BR /><font color=Blue>void</font>&nbsp;display&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*&nbsp;)&nbsp;; <BR /> <BR /><font color=Blue>int</font>&nbsp;count&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*&nbsp;)&nbsp;; <BR /> <BR /><font color=Blue>void</font>&nbsp;main(&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*p&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;n; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;<font color=Blue>NULL</font>&nbsp;;&nbsp;<font color=Green>/*&nbsp;empty&nbsp;linked&nbsp;list&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;append&nbsp;(&nbsp;&amp;p,&nbsp;<font color=Maroon>14</font>&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;append&nbsp;(&nbsp;&amp;p,&nbsp;<font color=Maroon>30</font>&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;append&nbsp;(&nbsp;&amp;p,&nbsp;<font color=Maroon>25</font>&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;append&nbsp;(&nbsp;&amp;p,&nbsp;<font color=Maroon>42</font>&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;append&nbsp;(&nbsp;&amp;p,&nbsp;<font color=Maroon>17</font>&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display&nbsp;(&nbsp;p&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(&nbsp;<font color=Maroon>"\nNo.&nbsp;of&nbsp;elements&nbsp;in&nbsp;the&nbsp;linked&nbsp;list&nbsp;=&nbsp;%d"</font>,&nbsp;count&nbsp;(p&nbsp;)&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\n&nbsp;Enter&nbsp;the&nbsp;element&nbsp;you&nbsp;want&nbsp;to&nbsp;insert"</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%d"</font>,&amp;n); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;append&nbsp;(&amp;p,n); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display&nbsp;(&nbsp;p&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(&nbsp;<font color=Maroon>"\nNo.&nbsp;of&nbsp;elements&nbsp;in&nbsp;the&nbsp;linked&nbsp;list&nbsp;=&nbsp;%d"</font>,&nbsp;count&nbsp;(p&nbsp;)&nbsp;)&nbsp;; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reverse&nbsp;(&nbsp;&amp;p&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\n&nbsp;Elements&nbsp;after&nbsp;reversing&nbsp;the&nbsp;linked&nbsp;list\n"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display&nbsp;(p); <BR />} <BR /> <BR /> <BR /><font color=Green>/*&nbsp;adds&nbsp;a&nbsp;node&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;a&nbsp;linked&nbsp;list&nbsp;*/</font> <BR /><font color=Blue>void</font>&nbsp;append&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;**q,&nbsp;<font color=Blue>int</font>&nbsp;num&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*temp,&nbsp;*r&nbsp;;&nbsp; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(&nbsp;*q&nbsp;==&nbsp;<font color=Blue>NULL</font>&nbsp;)&nbsp;<font color=Green>/*&nbsp;if&nbsp;the&nbsp;list&nbsp;is&nbsp;empty,&nbsp;createfirst&nbsp;node*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;malloc&nbsp;(&nbsp;<font color=Blue>sizeof</font>&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;)&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;-&gt;&nbsp;data&nbsp;=&nbsp;num&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;<font color=Blue>NULL</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*q&nbsp;=&nbsp;temp&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;*q&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;go&nbsp;to&nbsp;last&nbsp;node&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>&nbsp;(&nbsp;temp&nbsp;-&gt;&nbsp;link&nbsp;!=&nbsp;<font color=Blue>NULL</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;temp&nbsp;-&gt;&nbsp;link&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;add&nbsp;node&nbsp;at&nbsp;the&nbsp;end&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;malloc&nbsp;(&nbsp;<font color=Blue>sizeof</font>&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;)&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;-&gt;&nbsp;data&nbsp;=&nbsp;num&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;<font color=Blue>NULL</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;r&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;reverse&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;**x&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*q,&nbsp;*r,&nbsp;*s&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;*x&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;<font color=Blue>NULL</font>&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;traverse&nbsp;the&nbsp;entire&nbsp;linked&nbsp;list&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>&nbsp;(&nbsp;q&nbsp;!=&nbsp;<font color=Blue>NULL</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;r&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;q&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;q&nbsp;-&gt;&nbsp;link&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;-&gt;&nbsp;link&nbsp;=&nbsp;s&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*x&nbsp;=&nbsp;r&nbsp;; <BR />} <BR /> <BR /><font color=Blue>int</font>&nbsp;count(<font color=Blue>struct</font>&nbsp;node&nbsp;*list) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(list-&gt;next&nbsp;==&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>(<font color=Maroon>0</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>return</font>(<font color=Maroon>1</font>+count(list-&gt;next)); <BR />} <BR /> <BR /><font color=Green>/*&nbsp;displays&nbsp;the&nbsp;contents&nbsp;of&nbsp;the&nbsp;linked&nbsp;list&nbsp;*/</font> <BR /><font color=Blue>void</font>&nbsp;display&nbsp;(&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*q&nbsp;) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(&nbsp;<font color=Maroon>"\n"</font>&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>/*&nbsp;traverse&nbsp;the&nbsp;entire&nbsp;linked&nbsp;list&nbsp;*/</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>&nbsp;(&nbsp;q&nbsp;!=&nbsp;<font color=Blue>NULL</font>&nbsp;) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(&nbsp;<font color=Maroon>"%d&nbsp;"</font>,&nbsp;q&nbsp;-&gt;&nbsp;data&nbsp;)&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;q&nbsp;-&gt;&nbsp;link&nbsp;; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />}&nbsp; <BR /> <BR /> <BR />Question: <BR />Give&nbsp;an&nbsp;<font color=Maroon>0</font>(n)&nbsp;time&nbsp;non-recursive&nbsp;procedure&nbsp;that&nbsp;reverses&nbsp;a&nbsp;singly&nbsp;linked&nbsp;list&nbsp;of&nbsp;n&nbsp;nodes.&nbsp; <BR />The&nbsp;procedure&nbsp;should&nbsp;<font color=Blue>not</font>&nbsp;use&nbsp;more&nbsp;than&nbsp;constant&nbsp;storage&nbsp;beyond&nbsp;that&nbsp;needed&nbsp;<font color=Blue>for</font>&nbsp;the&nbsp;list&nbsp;itself. <BR /> <BR />Answer: <BR />The&nbsp;O&nbsp;(n)&nbsp;time&nbsp;non-recursive&nbsp;procedure&nbsp;that&nbsp;reverses&nbsp;a&nbsp;singly&nbsp;linked&nbsp;list&nbsp;of&nbsp;n&nbsp;nodes&nbsp;is&nbsp;as <BR />follows. <BR />reverse&nbsp;(<font color=Blue>struct</font>&nbsp;node&nbsp;**st) <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;node&nbsp;*p,&nbsp;*q,&nbsp;*r; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;*st; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;<font color=Blue>NULL</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>&nbsp;(p&nbsp;!=&nbsp;<font color=Blue>NULL</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=q; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;p; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;p-&gt;link; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link&nbsp;=&nbsp;r; <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*st&nbsp;=&nbsp;q; <BR />}&nbsp;</div>
      ]]>
      
    
        </string>
    
         <string name="DSAssignment1" formatted="false">
       <![CDATA[ 
        <div>Question: <BR />Explain&nbsp;pointers&nbsp;<font color=Blue>and</font>&nbsp;structures&nbsp;by&nbsp;giving&nbsp;an&nbsp;example&nbsp;of&nbsp;pointer&nbsp;to&nbsp;structure&nbsp;variable? <BR /> <BR />Answer: <BR />We&nbsp;can&nbsp;have&nbsp;a&nbsp;pointer&nbsp;pointing&nbsp;to&nbsp;a&nbsp;structure&nbsp;just&nbsp;the&nbsp;same&nbsp;way&nbsp;a&nbsp;pointer&nbsp;pointing <BR />to&nbsp;an&nbsp;<font color=Blue>int</font>,&nbsp;such&nbsp;pointers&nbsp;are&nbsp;known&nbsp;as&nbsp;structure&nbsp;pointers.&nbsp;For&nbsp;example&nbsp;consider&nbsp;the <BR />following&nbsp;example: <BR /> <BR />#<font color=Blue>include</font>&lt;stdio.h&gt; <BR />#<font color=Blue>include</font>&lt;conio.h&gt; <BR /><font color=Blue>struct</font>&nbsp;student <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;name[<font color=Maroon>20</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;roll_no; <BR />};&nbsp; <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>struct</font>&nbsp;student&nbsp;stu[<font color=Maroon>3</font>],*ptr; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\n&nbsp;Enter&nbsp;data\n"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(ptr=stu;ptr&lt;stu+<font color=Maroon>3</font>;ptr++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"Name"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%s"</font>,ptr-&gt;name); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"roll_no"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%d"</font>,&amp;ptr-&gt;roll_no); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nStudent&nbsp;Data\n\n"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr=stu; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(ptr&lt;stu+<font color=Maroon>3</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"%s&nbsp;%5d\n"</font>,ptr-&gt;name,ptr-&gt;roll_no);&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />}&nbsp; <BR /> <BR />Question: <BR />Write&nbsp;a&nbsp;function&nbsp;to&nbsp;remove&nbsp;duplicates&nbsp;from&nbsp;an&nbsp;ordered&nbsp;array.&nbsp;For&nbsp;example,&nbsp;<font color=Blue>if</font>&nbsp;input <BR />is:&nbsp;a,a,c,d,q,q,r,s,u,w,w,w,w;&nbsp;then&nbsp;the&nbsp;output&nbsp;should&nbsp;be&nbsp;a,c,d,q,r,s,u,w.&nbsp; <BR /> <BR />Answer: <BR />A&nbsp;C&nbsp;program&nbsp;to&nbsp;remove&nbsp;duplicates&nbsp;from&nbsp;an&nbsp;odered&nbsp;array: <BR /> <BR />#<font color=Blue>include</font>&lt;stdio.h&gt; <BR />#<font color=Blue>include</font>&lt;conio.h&gt; <BR />#<font color=Blue>include</font>&lt;<font color=Blue>string</font>.h&gt; <BR /> <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;i,j,k,l,flag=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;a[<font color=Maroon>50</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"enter&nbsp;the&nbsp;characters&nbsp;in&nbsp;the&nbsp;array"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gets(a); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l=strlen(a); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(i=<font color=Maroon>0</font>;i&lt;l-<font color=Maroon>1</font>;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(j=i+<font color=Maroon>1</font>;j&lt;l;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(a[i]==a[j]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l=l-<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(k=j;k&lt;l;k++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[k]=a[k+<font color=Maroon>1</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag=<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j=j-<font color=Maroon>1</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(flag==<font color=Maroon>0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"No&nbsp;duplicates&nbsp;found"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(i=<font color=Maroon>0</font>;i&lt;l;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"%c"</font>,a[i]); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />}&nbsp; <BR /> <BR />Question: <BR />Write&nbsp;a&nbsp;function&nbsp;to&nbsp;sort&nbsp;the&nbsp;characters&nbsp;of&nbsp;the&nbsp;<font color=Blue>string</font>&nbsp;passed&nbsp;to&nbsp;it&nbsp;as&nbsp;argument. <BR /> <BR />Answer: <BR />A&nbsp;C&nbsp;function&nbsp;to&nbsp;sort&nbsp;the&nbsp;characters&nbsp;of&nbsp;the&nbsp;<font color=Blue>string</font>: <BR />main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;a[<font color=Maroon>100</font>],ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;i,j; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(<font color=Maroon>"\nEnter&nbsp;the&nbsp;string:-&gt;&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gets(a); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>&nbsp;(i=<font color=Maroon>0</font>;a[i]!=<font color=Maroon>\0</font>;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>&nbsp;(j=i+<font color=Maroon>1</font>;a[j]!=<font color=Maroon>\0</font>;j++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>&nbsp;(a[i]&gt;a[j]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch=a[i]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]=a[j]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[j]=ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(<font color=Maroon>"\nString&nbsp;after&nbsp;sorting\n"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts(a); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />}&nbsp; <BR /> <BR /> <BR /></div>
              ]]>
       </string>
        
         
         <string name="DSAssignment2" formatted="false">
       <![CDATA[ 
         <div>Question: <BR />Admission&nbsp;to&nbsp;a&nbsp;college&nbsp;in&nbsp;science&nbsp;branch&nbsp;is&nbsp;given&nbsp;<font color=Blue>if</font>&nbsp;the&nbsp;following&nbsp;conditions&nbsp;are&nbsp;satisfied <BR />(i)Maths&nbsp;marks&nbsp;&gt;=&nbsp;<font color=Maroon>80</font> <BR />(ii)Physics&nbsp;marks&nbsp;&gt;=&nbsp;<font color=Maroon>75</font> <BR />(iii)Chemistry&nbsp;marks&nbsp;&gt;=&nbsp;<font color=Maroon>70</font> <BR />(iv)Total&nbsp;percentage&nbsp;in&nbsp;all&nbsp;three&nbsp;subjects&nbsp;&gt;=&nbsp;<font color=Maroon>80</font> <BR /> <BR />Given&nbsp;the&nbsp;marks&nbsp;in&nbsp;three&nbsp;subjects,&nbsp;write&nbsp;a&nbsp;program&nbsp;to&nbsp;process&nbsp;the&nbsp;applications&nbsp;to&nbsp;list <BR />the&nbsp;eligible&nbsp;candidates. <BR /> <BR />Answer: <BR />A&nbsp;C&nbsp;program&nbsp;to&nbsp;process&nbsp;the&nbsp;applications&nbsp;to&nbsp;list&nbsp;the <BR />eligible&nbsp;candidates&nbsp;is&nbsp;listed&nbsp;below: <BR /> <BR />#<font color=Blue>include</font>&lt;stdio.h&gt; <BR />#<font color=Blue>include</font>&lt;conio.h&gt; <BR /><font color=Blue>void</font>&nbsp;main() <BR />{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;math,phy,che; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>float</font>&nbsp;per; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;ch; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nDo&nbsp;u&nbsp;want&nbsp;to&nbsp;enter&nbsp;any&nbsp;record:-&gt;&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch=getch();&nbsp; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(ch==<font color=Maroon>y</font>&nbsp;||&nbsp;ch==<font color=Maroon>Y</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nEnter&nbsp;Marks&nbsp;in&nbsp;Math:-&gt;&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%f"</font>,&amp;math); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nEnter&nbsp;Marks&nbsp;in&nbsp;Physics:-&gt;&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%f"</font>,&amp;phy); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nEnter&nbsp;Marks&nbsp;in&nbsp;Chemistry:-&gt;&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%f"</font>,&amp;che); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;per=(math+phy+che)/<font color=Maroon>3</font><font color=Maroon>.00</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(math&gt;=<font color=Maroon>80</font><font color=Maroon>.00</font>&nbsp;&amp;&amp;&nbsp;phy&gt;=<font color=Maroon>75</font><font color=Maroon>.00</font>&nbsp;&amp;&amp;&nbsp;che&gt;=<font color=Maroon>70</font><font color=Maroon>.00</font>&nbsp;&amp;&amp;&nbsp;per&gt;=<font color=Maroon>80</font><font color=Maroon>.00</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nYou&nbsp;are&nbsp;eligible&nbsp;for&nbsp;selection."</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nSorry&nbsp;you&nbsp;are&nbsp;not&nbsp;eligible!!"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nDo&nbsp;u&nbsp;want&nbsp;to&nbsp;enter&nbsp;new&nbsp;record:-&gt;&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch=getch(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(<font color=Maroon>"\nThanks&nbsp;for&nbsp;using&nbsp;it!"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />}&nbsp; <BR /> <BR />Question: <BR />Given&nbsp;are&nbsp;two&nbsp;one&nbsp;dimensional&nbsp;arrays&nbsp;A&nbsp;<font color=Blue>and</font>&nbsp;B&nbsp;which&nbsp;are&nbsp;stored&nbsp;in&nbsp;ascending <BR />order.&nbsp;Write&nbsp;a&nbsp;program&nbsp;to&nbsp;merge&nbsp;them&nbsp;into&nbsp;a&nbsp;single&nbsp;sorted&nbsp;array&nbsp;C&nbsp;that&nbsp;contains <BR />every&nbsp;element&nbsp;of&nbsp;A&nbsp;<font color=Blue>and</font>&nbsp;B&nbsp;in&nbsp;ascending&nbsp;order. <BR /> <BR />Answer: <BR />A&nbsp;program&nbsp;to&nbsp;merge&nbsp;two&nbsp;arrays&nbsp;into&nbsp;single&nbsp;sorted&nbsp;array&nbsp;that&nbsp;contains&nbsp;every&nbsp;element&nbsp;of&nbsp;arrays&nbsp; <BR />into&nbsp;a&nbsp;ascending&nbsp;order: <BR /> <BR />#<font color=Blue>include</font>&lt;stdio.h&gt; <BR />#<font color=Blue>include</font>&lt;conio.h&gt; <BR /> <BR /><font color=Blue>void</font>&nbsp;sort(<font color=Blue>int</font>*,<font color=Blue>int</font>); <BR /><font color=Blue>void</font>&nbsp;merge(<font color=Blue>int</font>*,<font color=Blue>int</font>*,<font color=Blue>int</font>,<font color=Blue>int</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR /><font color=Blue>void</font>&nbsp;main()&nbsp; <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;a[<font color=Maroon>10</font>],b[<font color=Maroon>10</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;i,j,m,n; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"how&nbsp;many&nbsp;numbers&nbsp;u&nbsp;want&nbsp;to&nbsp;enter&nbsp;in&nbsp;1st&nbsp;array&nbsp;:&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%d"</font>,&amp;n); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"enter&nbsp;numbers&nbsp;in&nbsp;ascending&nbsp;order&nbsp;:\n"</font>); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(i=<font color=Maroon>0</font>;i&lt;n;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%d"</font>,&amp;a[i]); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"how&nbsp;many&nbsp;numbers&nbsp;u&nbsp;want&nbsp;to&nbsp;enter&nbsp;in&nbsp;2nd&nbsp;array&nbsp;:&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%d"</font>,&amp;m); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"enter&nbsp;numbers&nbsp;in&nbsp;ascending&nbsp;order&nbsp;:\n"</font>); <BR /> <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(i=<font color=Maroon>0</font>;i&lt;m;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(<font color=Maroon>"%d"</font>,&amp;b[i]); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(a,b,n,m); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />} <BR /> <BR /><font color=Blue>void</font>&nbsp;merge(<font color=Blue>int</font>&nbsp;*a,<font color=Blue>int</font>&nbsp;*b,<font color=Blue>int</font>&nbsp;n,<font color=Blue>int</font>&nbsp;m) <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;i=<font color=Maroon>0</font>,c[<font color=Maroon>20</font>],j=<font color=Maroon>0</font>,k=<font color=Maroon>0</font>,count=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(i&lt;=n&amp;&amp;j&lt;=m) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(a[i]&lt;b[j]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[k]=a[i]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(a[i]&gt;b[j]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[k]=b[j]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(a[i]==b[j]) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[k]=a[i]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(i&lt;=n&amp;&amp;j==m) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(i&lt;=n) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[k]=a[i]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(i==n&amp;&amp;j&lt;=m) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>while</font>(j&lt;=m) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[k]=b[j]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR /> <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(i=<font color=Maroon>0</font>;i&lt;m+n-count;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"%d\t"</font>,c[i]);&nbsp; <BR />} <BR /> <BR />Question&nbsp;: <BR />Write&nbsp;a&nbsp;C&nbsp;program&nbsp;that&nbsp;reads&nbsp;the&nbsp;text&nbsp;<font color=Blue>and</font>&nbsp;counts&nbsp;all&nbsp;occurrences&nbsp;of&nbsp;a&nbsp;particular&nbsp;word. <BR /> <BR />Answer: <BR />A&nbsp;C&nbsp;program&nbsp;that&nbsp;reads&nbsp;the&nbsp;text&nbsp;<font color=Blue>and</font>&nbsp;count&nbsp;all&nbsp;occurrences&nbsp;of&nbsp;a&nbsp;particular&nbsp;word: <BR /> <BR />#<font color=Blue>include</font>&nbsp;&lt;<font color=Blue>string</font>.h&gt; <BR /><font color=Blue>void</font>&nbsp;main() <BR />{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>char</font>&nbsp;a[<font color=Maroon>100</font>],b[<font color=Maroon>20</font>],c[<font color=Maroon>20</font>]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>int</font>&nbsp;i,count=<font color=Maroon>0</font>,k=<font color=Maroon>0</font>,len; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrscr(); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(<font color=Maroon>"\nEnter&nbsp;a&nbsp;string:-&gt;&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gets(a); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"\nEnter&nbsp;the&nbsp;word&nbsp;to&nbsp;be&nbsp;searched:-&gt;&nbsp;"</font>); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gets(b); <BR /> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len=strlen(a); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>for</font>(i=<font color=Maroon>0</font>;i&lt;=len;i++) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Green>//Assuming&nbsp;Space&nbsp;,&nbsp;Tab&nbsp;and&nbsp;NULL&nbsp;as&nbsp;word&nbsp;separator</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(a[i]==<font color=Maroon>32</font>&nbsp;||&nbsp;a[i]==<font color=Maroon>\t</font>&nbsp;||&nbsp;a[i]==<font color=Maroon>\0</font>) <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[k]=<font color=Maroon>\0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>if</font>(strcmp(b,c)==<font color=Maroon>0</font>)count++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k=<font color=Maroon>0</font>; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=Blue>else</font> <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[k]=a[i]; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++; <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<font color=Maroon>"Occurance&nbsp;of&nbsp;%s&nbsp;is&nbsp;=&nbsp;%d"</font>,b,count); <BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getch(); <BR />}&nbsp;</div>
        ]]>
        </string>


</resources>
